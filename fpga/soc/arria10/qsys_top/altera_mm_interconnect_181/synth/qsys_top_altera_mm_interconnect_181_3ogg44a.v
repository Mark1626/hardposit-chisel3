// qsys_top_altera_mm_interconnect_181_3ogg44a.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_181_3ogg44a (
		output wire [1:0]  num1_s1_address,                                      //                                        num1_s1.address
		output wire        num1_s1_write,                                        //                                               .write
		input  wire [31:0] num1_s1_readdata,                                     //                                               .readdata
		output wire [31:0] num1_s1_writedata,                                    //                                               .writedata
		output wire        num1_s1_chipselect,                                   //                                               .chipselect
		output wire [1:0]  num2_s1_address,                                      //                                        num2_s1.address
		output wire        num2_s1_write,                                        //                                               .write
		input  wire [31:0] num2_s1_readdata,                                     //                                               .readdata
		output wire [31:0] num2_s1_writedata,                                    //                                               .writedata
		output wire        num2_s1_chipselect,                                   //                                               .chipselect
		output wire [1:0]  result_s1_address,                                    //                                      result_s1.address
		input  wire [31:0] result_s1_readdata,                                   //                                               .readdata
		output wire [9:0]  onchip_memory2_0_s1_address,                          //                            onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                            //                                               .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                         //                                               .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                        //                                               .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                       //                                               .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                       //                                               .chipselect
		output wire        onchip_memory2_0_s1_clken,                            //                                               .clken
		input  wire [3:0]  a10_hps_h2f_lw_axi_master_awid,                       //                      a10_hps_h2f_lw_axi_master.awid
		input  wire [20:0] a10_hps_h2f_lw_axi_master_awaddr,                     //                                               .awaddr
		input  wire [3:0]  a10_hps_h2f_lw_axi_master_awlen,                      //                                               .awlen
		input  wire [2:0]  a10_hps_h2f_lw_axi_master_awsize,                     //                                               .awsize
		input  wire [1:0]  a10_hps_h2f_lw_axi_master_awburst,                    //                                               .awburst
		input  wire [1:0]  a10_hps_h2f_lw_axi_master_awlock,                     //                                               .awlock
		input  wire [3:0]  a10_hps_h2f_lw_axi_master_awcache,                    //                                               .awcache
		input  wire [2:0]  a10_hps_h2f_lw_axi_master_awprot,                     //                                               .awprot
		input  wire [4:0]  a10_hps_h2f_lw_axi_master_awuser,                     //                                               .awuser
		input  wire        a10_hps_h2f_lw_axi_master_awvalid,                    //                                               .awvalid
		output wire        a10_hps_h2f_lw_axi_master_awready,                    //                                               .awready
		input  wire [3:0]  a10_hps_h2f_lw_axi_master_wid,                        //                                               .wid
		input  wire [31:0] a10_hps_h2f_lw_axi_master_wdata,                      //                                               .wdata
		input  wire [3:0]  a10_hps_h2f_lw_axi_master_wstrb,                      //                                               .wstrb
		input  wire        a10_hps_h2f_lw_axi_master_wlast,                      //                                               .wlast
		input  wire        a10_hps_h2f_lw_axi_master_wvalid,                     //                                               .wvalid
		output wire        a10_hps_h2f_lw_axi_master_wready,                     //                                               .wready
		output wire [3:0]  a10_hps_h2f_lw_axi_master_bid,                        //                                               .bid
		output wire [1:0]  a10_hps_h2f_lw_axi_master_bresp,                      //                                               .bresp
		output wire        a10_hps_h2f_lw_axi_master_bvalid,                     //                                               .bvalid
		input  wire        a10_hps_h2f_lw_axi_master_bready,                     //                                               .bready
		input  wire [3:0]  a10_hps_h2f_lw_axi_master_arid,                       //                                               .arid
		input  wire [20:0] a10_hps_h2f_lw_axi_master_araddr,                     //                                               .araddr
		input  wire [3:0]  a10_hps_h2f_lw_axi_master_arlen,                      //                                               .arlen
		input  wire [2:0]  a10_hps_h2f_lw_axi_master_arsize,                     //                                               .arsize
		input  wire [1:0]  a10_hps_h2f_lw_axi_master_arburst,                    //                                               .arburst
		input  wire [1:0]  a10_hps_h2f_lw_axi_master_arlock,                     //                                               .arlock
		input  wire [3:0]  a10_hps_h2f_lw_axi_master_arcache,                    //                                               .arcache
		input  wire [2:0]  a10_hps_h2f_lw_axi_master_arprot,                     //                                               .arprot
		input  wire [4:0]  a10_hps_h2f_lw_axi_master_aruser,                     //                                               .aruser
		input  wire        a10_hps_h2f_lw_axi_master_arvalid,                    //                                               .arvalid
		output wire        a10_hps_h2f_lw_axi_master_arready,                    //                                               .arready
		output wire [3:0]  a10_hps_h2f_lw_axi_master_rid,                        //                                               .rid
		output wire [31:0] a10_hps_h2f_lw_axi_master_rdata,                      //                                               .rdata
		output wire [1:0]  a10_hps_h2f_lw_axi_master_rresp,                      //                                               .rresp
		output wire        a10_hps_h2f_lw_axi_master_rlast,                      //                                               .rlast
		output wire        a10_hps_h2f_lw_axi_master_rvalid,                     //                                               .rvalid
		input  wire        a10_hps_h2f_lw_axi_master_rready,                     //                                               .rready
		input  wire        a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset, // a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset.reset
		input  wire        num1_reset_reset_bridge_in_reset_reset,               //               num1_reset_reset_bridge_in_reset.reset
		input  wire        clock_bridge_0_out_clk_clk                            //                         clock_bridge_0_out_clk.clk
	);

	wire   [31:0] num1_s1_agent_m0_readdata;                                  // num1_s1_translator:uav_readdata -> num1_s1_agent:m0_readdata
	wire          num1_s1_agent_m0_waitrequest;                               // num1_s1_translator:uav_waitrequest -> num1_s1_agent:m0_waitrequest
	wire          num1_s1_agent_m0_debugaccess;                               // num1_s1_agent:m0_debugaccess -> num1_s1_translator:uav_debugaccess
	wire   [20:0] num1_s1_agent_m0_address;                                   // num1_s1_agent:m0_address -> num1_s1_translator:uav_address
	wire    [3:0] num1_s1_agent_m0_byteenable;                                // num1_s1_agent:m0_byteenable -> num1_s1_translator:uav_byteenable
	wire          num1_s1_agent_m0_read;                                      // num1_s1_agent:m0_read -> num1_s1_translator:uav_read
	wire          num1_s1_agent_m0_readdatavalid;                             // num1_s1_translator:uav_readdatavalid -> num1_s1_agent:m0_readdatavalid
	wire          num1_s1_agent_m0_lock;                                      // num1_s1_agent:m0_lock -> num1_s1_translator:uav_lock
	wire   [31:0] num1_s1_agent_m0_writedata;                                 // num1_s1_agent:m0_writedata -> num1_s1_translator:uav_writedata
	wire          num1_s1_agent_m0_write;                                     // num1_s1_agent:m0_write -> num1_s1_translator:uav_write
	wire    [2:0] num1_s1_agent_m0_burstcount;                                // num1_s1_agent:m0_burstcount -> num1_s1_translator:uav_burstcount
	wire          num1_s1_agent_rf_source_valid;                              // num1_s1_agent:rf_source_valid -> num1_s1_agent_rsp_fifo:in_valid
	wire  [119:0] num1_s1_agent_rf_source_data;                               // num1_s1_agent:rf_source_data -> num1_s1_agent_rsp_fifo:in_data
	wire          num1_s1_agent_rf_source_ready;                              // num1_s1_agent_rsp_fifo:in_ready -> num1_s1_agent:rf_source_ready
	wire          num1_s1_agent_rf_source_startofpacket;                      // num1_s1_agent:rf_source_startofpacket -> num1_s1_agent_rsp_fifo:in_startofpacket
	wire          num1_s1_agent_rf_source_endofpacket;                        // num1_s1_agent:rf_source_endofpacket -> num1_s1_agent_rsp_fifo:in_endofpacket
	wire          num1_s1_agent_rsp_fifo_out_valid;                           // num1_s1_agent_rsp_fifo:out_valid -> num1_s1_agent:rf_sink_valid
	wire  [119:0] num1_s1_agent_rsp_fifo_out_data;                            // num1_s1_agent_rsp_fifo:out_data -> num1_s1_agent:rf_sink_data
	wire          num1_s1_agent_rsp_fifo_out_ready;                           // num1_s1_agent:rf_sink_ready -> num1_s1_agent_rsp_fifo:out_ready
	wire          num1_s1_agent_rsp_fifo_out_startofpacket;                   // num1_s1_agent_rsp_fifo:out_startofpacket -> num1_s1_agent:rf_sink_startofpacket
	wire          num1_s1_agent_rsp_fifo_out_endofpacket;                     // num1_s1_agent_rsp_fifo:out_endofpacket -> num1_s1_agent:rf_sink_endofpacket
	wire          num1_s1_agent_rdata_fifo_src_valid;                         // num1_s1_agent:rdata_fifo_src_valid -> num1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] num1_s1_agent_rdata_fifo_src_data;                          // num1_s1_agent:rdata_fifo_src_data -> num1_s1_agent_rdata_fifo:in_data
	wire          num1_s1_agent_rdata_fifo_src_ready;                         // num1_s1_agent_rdata_fifo:in_ready -> num1_s1_agent:rdata_fifo_src_ready
	wire          num1_s1_agent_rdata_fifo_out_valid;                         // num1_s1_agent_rdata_fifo:out_valid -> num1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] num1_s1_agent_rdata_fifo_out_data;                          // num1_s1_agent_rdata_fifo:out_data -> num1_s1_agent:rdata_fifo_sink_data
	wire          num1_s1_agent_rdata_fifo_out_ready;                         // num1_s1_agent:rdata_fifo_sink_ready -> num1_s1_agent_rdata_fifo:out_ready
	wire   [31:0] num2_s1_agent_m0_readdata;                                  // num2_s1_translator:uav_readdata -> num2_s1_agent:m0_readdata
	wire          num2_s1_agent_m0_waitrequest;                               // num2_s1_translator:uav_waitrequest -> num2_s1_agent:m0_waitrequest
	wire          num2_s1_agent_m0_debugaccess;                               // num2_s1_agent:m0_debugaccess -> num2_s1_translator:uav_debugaccess
	wire   [20:0] num2_s1_agent_m0_address;                                   // num2_s1_agent:m0_address -> num2_s1_translator:uav_address
	wire    [3:0] num2_s1_agent_m0_byteenable;                                // num2_s1_agent:m0_byteenable -> num2_s1_translator:uav_byteenable
	wire          num2_s1_agent_m0_read;                                      // num2_s1_agent:m0_read -> num2_s1_translator:uav_read
	wire          num2_s1_agent_m0_readdatavalid;                             // num2_s1_translator:uav_readdatavalid -> num2_s1_agent:m0_readdatavalid
	wire          num2_s1_agent_m0_lock;                                      // num2_s1_agent:m0_lock -> num2_s1_translator:uav_lock
	wire   [31:0] num2_s1_agent_m0_writedata;                                 // num2_s1_agent:m0_writedata -> num2_s1_translator:uav_writedata
	wire          num2_s1_agent_m0_write;                                     // num2_s1_agent:m0_write -> num2_s1_translator:uav_write
	wire    [2:0] num2_s1_agent_m0_burstcount;                                // num2_s1_agent:m0_burstcount -> num2_s1_translator:uav_burstcount
	wire          num2_s1_agent_rf_source_valid;                              // num2_s1_agent:rf_source_valid -> num2_s1_agent_rsp_fifo:in_valid
	wire  [119:0] num2_s1_agent_rf_source_data;                               // num2_s1_agent:rf_source_data -> num2_s1_agent_rsp_fifo:in_data
	wire          num2_s1_agent_rf_source_ready;                              // num2_s1_agent_rsp_fifo:in_ready -> num2_s1_agent:rf_source_ready
	wire          num2_s1_agent_rf_source_startofpacket;                      // num2_s1_agent:rf_source_startofpacket -> num2_s1_agent_rsp_fifo:in_startofpacket
	wire          num2_s1_agent_rf_source_endofpacket;                        // num2_s1_agent:rf_source_endofpacket -> num2_s1_agent_rsp_fifo:in_endofpacket
	wire          num2_s1_agent_rsp_fifo_out_valid;                           // num2_s1_agent_rsp_fifo:out_valid -> num2_s1_agent:rf_sink_valid
	wire  [119:0] num2_s1_agent_rsp_fifo_out_data;                            // num2_s1_agent_rsp_fifo:out_data -> num2_s1_agent:rf_sink_data
	wire          num2_s1_agent_rsp_fifo_out_ready;                           // num2_s1_agent:rf_sink_ready -> num2_s1_agent_rsp_fifo:out_ready
	wire          num2_s1_agent_rsp_fifo_out_startofpacket;                   // num2_s1_agent_rsp_fifo:out_startofpacket -> num2_s1_agent:rf_sink_startofpacket
	wire          num2_s1_agent_rsp_fifo_out_endofpacket;                     // num2_s1_agent_rsp_fifo:out_endofpacket -> num2_s1_agent:rf_sink_endofpacket
	wire          num2_s1_agent_rdata_fifo_src_valid;                         // num2_s1_agent:rdata_fifo_src_valid -> num2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] num2_s1_agent_rdata_fifo_src_data;                          // num2_s1_agent:rdata_fifo_src_data -> num2_s1_agent_rdata_fifo:in_data
	wire          num2_s1_agent_rdata_fifo_src_ready;                         // num2_s1_agent_rdata_fifo:in_ready -> num2_s1_agent:rdata_fifo_src_ready
	wire          num2_s1_agent_rdata_fifo_out_valid;                         // num2_s1_agent_rdata_fifo:out_valid -> num2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] num2_s1_agent_rdata_fifo_out_data;                          // num2_s1_agent_rdata_fifo:out_data -> num2_s1_agent:rdata_fifo_sink_data
	wire          num2_s1_agent_rdata_fifo_out_ready;                         // num2_s1_agent:rdata_fifo_sink_ready -> num2_s1_agent_rdata_fifo:out_ready
	wire   [31:0] result_s1_agent_m0_readdata;                                // result_s1_translator:uav_readdata -> result_s1_agent:m0_readdata
	wire          result_s1_agent_m0_waitrequest;                             // result_s1_translator:uav_waitrequest -> result_s1_agent:m0_waitrequest
	wire          result_s1_agent_m0_debugaccess;                             // result_s1_agent:m0_debugaccess -> result_s1_translator:uav_debugaccess
	wire   [20:0] result_s1_agent_m0_address;                                 // result_s1_agent:m0_address -> result_s1_translator:uav_address
	wire    [3:0] result_s1_agent_m0_byteenable;                              // result_s1_agent:m0_byteenable -> result_s1_translator:uav_byteenable
	wire          result_s1_agent_m0_read;                                    // result_s1_agent:m0_read -> result_s1_translator:uav_read
	wire          result_s1_agent_m0_readdatavalid;                           // result_s1_translator:uav_readdatavalid -> result_s1_agent:m0_readdatavalid
	wire          result_s1_agent_m0_lock;                                    // result_s1_agent:m0_lock -> result_s1_translator:uav_lock
	wire   [31:0] result_s1_agent_m0_writedata;                               // result_s1_agent:m0_writedata -> result_s1_translator:uav_writedata
	wire          result_s1_agent_m0_write;                                   // result_s1_agent:m0_write -> result_s1_translator:uav_write
	wire    [2:0] result_s1_agent_m0_burstcount;                              // result_s1_agent:m0_burstcount -> result_s1_translator:uav_burstcount
	wire          result_s1_agent_rf_source_valid;                            // result_s1_agent:rf_source_valid -> result_s1_agent_rsp_fifo:in_valid
	wire  [119:0] result_s1_agent_rf_source_data;                             // result_s1_agent:rf_source_data -> result_s1_agent_rsp_fifo:in_data
	wire          result_s1_agent_rf_source_ready;                            // result_s1_agent_rsp_fifo:in_ready -> result_s1_agent:rf_source_ready
	wire          result_s1_agent_rf_source_startofpacket;                    // result_s1_agent:rf_source_startofpacket -> result_s1_agent_rsp_fifo:in_startofpacket
	wire          result_s1_agent_rf_source_endofpacket;                      // result_s1_agent:rf_source_endofpacket -> result_s1_agent_rsp_fifo:in_endofpacket
	wire          result_s1_agent_rsp_fifo_out_valid;                         // result_s1_agent_rsp_fifo:out_valid -> result_s1_agent:rf_sink_valid
	wire  [119:0] result_s1_agent_rsp_fifo_out_data;                          // result_s1_agent_rsp_fifo:out_data -> result_s1_agent:rf_sink_data
	wire          result_s1_agent_rsp_fifo_out_ready;                         // result_s1_agent:rf_sink_ready -> result_s1_agent_rsp_fifo:out_ready
	wire          result_s1_agent_rsp_fifo_out_startofpacket;                 // result_s1_agent_rsp_fifo:out_startofpacket -> result_s1_agent:rf_sink_startofpacket
	wire          result_s1_agent_rsp_fifo_out_endofpacket;                   // result_s1_agent_rsp_fifo:out_endofpacket -> result_s1_agent:rf_sink_endofpacket
	wire          result_s1_agent_rdata_fifo_src_valid;                       // result_s1_agent:rdata_fifo_src_valid -> result_s1_agent_rdata_fifo:in_valid
	wire   [33:0] result_s1_agent_rdata_fifo_src_data;                        // result_s1_agent:rdata_fifo_src_data -> result_s1_agent_rdata_fifo:in_data
	wire          result_s1_agent_rdata_fifo_src_ready;                       // result_s1_agent_rdata_fifo:in_ready -> result_s1_agent:rdata_fifo_src_ready
	wire          result_s1_agent_rdata_fifo_out_valid;                       // result_s1_agent_rdata_fifo:out_valid -> result_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] result_s1_agent_rdata_fifo_out_data;                        // result_s1_agent_rdata_fifo:out_data -> result_s1_agent:rdata_fifo_sink_data
	wire          result_s1_agent_rdata_fifo_out_ready;                       // result_s1_agent:rdata_fifo_sink_ready -> result_s1_agent_rdata_fifo:out_ready
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                      // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                   // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                   // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [20:0] onchip_memory2_0_s1_agent_m0_address;                       // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                    // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                          // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                 // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                          // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                     // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                         // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                    // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                  // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [119:0] onchip_memory2_0_s1_agent_rf_source_data;                   // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                  // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;          // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;            // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;               // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [119:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;               // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;       // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;         // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;             // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;              // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;             // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;             // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;              // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;             // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire          a10_hps_h2f_lw_axi_master_agent_write_cp_valid;             // a10_hps_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [118:0] a10_hps_h2f_lw_axi_master_agent_write_cp_data;              // a10_hps_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          a10_hps_h2f_lw_axi_master_agent_write_cp_ready;             // router:sink_ready -> a10_hps_h2f_lw_axi_master_agent:write_cp_ready
	wire          a10_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;     // a10_hps_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          a10_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;       // a10_hps_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          a10_hps_h2f_lw_axi_master_agent_read_cp_valid;              // a10_hps_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [118:0] a10_hps_h2f_lw_axi_master_agent_read_cp_data;               // a10_hps_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          a10_hps_h2f_lw_axi_master_agent_read_cp_ready;              // router_001:sink_ready -> a10_hps_h2f_lw_axi_master_agent:read_cp_ready
	wire          a10_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;      // a10_hps_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          a10_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;        // a10_hps_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_002_src_valid;                                       // router_002:src_valid -> rsp_demux:sink_valid
	wire  [118:0] router_002_src_data;                                        // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                       // rsp_demux:sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                     // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                               // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                 // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                       // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [118:0] router_003_src_data;                                        // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                       // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                     // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                               // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                 // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                       // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [118:0] router_004_src_data;                                        // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                       // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                     // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                               // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                 // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                       // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [118:0] router_005_src_data;                                        // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                       // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                     // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                               // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                 // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_src_valid;                                           // router:src_valid -> a10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [118:0] router_src_data;                                            // router:src_data -> a10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                           // a10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                         // router:src_channel -> a10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                   // router:src_startofpacket -> a10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                     // router:src_endofpacket -> a10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;         // a10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> a10_hps_h2f_lw_axi_master_agent:write_rp_valid
	wire  [118:0] a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;          // a10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_data -> a10_hps_h2f_lw_axi_master_agent:write_rp_data
	wire          a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;         // a10_hps_h2f_lw_axi_master_agent:write_rp_ready -> a10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [3:0] a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;       // a10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> a10_hps_h2f_lw_axi_master_agent:write_rp_channel
	wire          a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket; // a10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> a10_hps_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;   // a10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> a10_hps_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                       // router_001:src_valid -> a10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [118:0] router_001_src_data;                                        // router_001:src_data -> a10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                       // a10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                     // router_001:src_channel -> a10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                               // router_001:src_startofpacket -> a10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                 // router_001:src_endofpacket -> a10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;         // a10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> a10_hps_h2f_lw_axi_master_agent:read_rp_valid
	wire  [118:0] a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;          // a10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_data -> a10_hps_h2f_lw_axi_master_agent:read_rp_data
	wire          a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;         // a10_hps_h2f_lw_axi_master_agent:read_rp_ready -> a10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [3:0] a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;       // a10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> a10_hps_h2f_lw_axi_master_agent:read_rp_channel
	wire          a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket; // a10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> a10_hps_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;   // a10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> a10_hps_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                          // cmd_mux:src_valid -> num1_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_src_data;                                           // cmd_mux:src_data -> num1_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                          // num1_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                        // cmd_mux:src_channel -> num1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                  // cmd_mux:src_startofpacket -> num1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                    // cmd_mux:src_endofpacket -> num1_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                      // cmd_mux_001:src_valid -> num2_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_001_src_data;                                       // cmd_mux_001:src_data -> num2_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                      // num2_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                    // cmd_mux_001:src_channel -> num2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                              // cmd_mux_001:src_startofpacket -> num2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                // cmd_mux_001:src_endofpacket -> num2_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                      // cmd_mux_002:src_valid -> result_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_002_src_data;                                       // cmd_mux_002:src_data -> result_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                      // result_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                    // cmd_mux_002:src_channel -> result_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                              // cmd_mux_002:src_startofpacket -> result_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                // cmd_mux_002:src_endofpacket -> result_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                      // cmd_mux_003:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_003_src_data;                                       // cmd_mux_003:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                      // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                    // cmd_mux_003:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                              // cmd_mux_003:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                // cmd_mux_003:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire    [0:0] a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid;         // a10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [118:0] a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;          // a10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;         // limiter_pipeline:in_ready -> a10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [3:0] a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;       // a10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket; // a10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;   // a10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                             // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [118:0] limiter_pipeline_source0_data;                              // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                             // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [3:0] limiter_pipeline_source0_channel;                           // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                     // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                       // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                          // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [118:0] rsp_mux_src_data;                                           // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                          // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                        // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                  // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                    // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                         // limiter_pipeline_001:out_valid -> a10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [118:0] limiter_pipeline_001_source0_data;                          // limiter_pipeline_001:out_data -> a10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                         // a10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [3:0] limiter_pipeline_001_source0_channel;                       // limiter_pipeline_001:out_channel -> a10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                 // limiter_pipeline_001:out_startofpacket -> a10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                   // limiter_pipeline_001:out_endofpacket -> a10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid;         // a10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [118:0] a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;          // a10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;         // limiter_pipeline_002:in_ready -> a10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [3:0] a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;       // a10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket; // a10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;   // a10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                         // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [118:0] limiter_pipeline_002_source0_data;                          // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                         // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire    [3:0] limiter_pipeline_002_source0_channel;                       // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                 // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                   // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                      // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [118:0] rsp_mux_001_src_data;                                       // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                      // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                    // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                              // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                         // limiter_pipeline_003:out_valid -> a10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [118:0] limiter_pipeline_003_source0_data;                          // limiter_pipeline_003:out_data -> a10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                         // a10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [3:0] limiter_pipeline_003_source0_channel;                       // limiter_pipeline_003:out_channel -> a10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                 // limiter_pipeline_003:out_startofpacket -> a10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                   // limiter_pipeline_003:out_endofpacket -> a10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          num1_s1_burst_adapter_source0_valid;                        // num1_s1_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [118:0] num1_s1_burst_adapter_source0_data;                         // num1_s1_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          num1_s1_burst_adapter_source0_ready;                        // agent_pipeline:in_ready -> num1_s1_burst_adapter:source0_ready
	wire    [3:0] num1_s1_burst_adapter_source0_channel;                      // num1_s1_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          num1_s1_burst_adapter_source0_startofpacket;                // num1_s1_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          num1_s1_burst_adapter_source0_endofpacket;                  // num1_s1_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                               // agent_pipeline:out_valid -> num1_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_source0_data;                                // agent_pipeline:out_data -> num1_s1_agent:cp_data
	wire          agent_pipeline_source0_ready;                               // num1_s1_agent:cp_ready -> agent_pipeline:out_ready
	wire    [3:0] agent_pipeline_source0_channel;                             // agent_pipeline:out_channel -> num1_s1_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                       // agent_pipeline:out_startofpacket -> num1_s1_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                         // agent_pipeline:out_endofpacket -> num1_s1_agent:cp_endofpacket
	wire          num1_s1_agent_rp_valid;                                     // num1_s1_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [118:0] num1_s1_agent_rp_data;                                      // num1_s1_agent:rp_data -> agent_pipeline_001:in_data
	wire          num1_s1_agent_rp_ready;                                     // agent_pipeline_001:in_ready -> num1_s1_agent:rp_ready
	wire          num1_s1_agent_rp_startofpacket;                             // num1_s1_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          num1_s1_agent_rp_endofpacket;                               // num1_s1_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                           // agent_pipeline_001:out_valid -> router_002:sink_valid
	wire  [118:0] agent_pipeline_001_source0_data;                            // agent_pipeline_001:out_data -> router_002:sink_data
	wire          agent_pipeline_001_source0_ready;                           // router_002:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                   // agent_pipeline_001:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                     // agent_pipeline_001:out_endofpacket -> router_002:sink_endofpacket
	wire          num2_s1_burst_adapter_source0_valid;                        // num2_s1_burst_adapter:source0_valid -> agent_pipeline_002:in_valid
	wire  [118:0] num2_s1_burst_adapter_source0_data;                         // num2_s1_burst_adapter:source0_data -> agent_pipeline_002:in_data
	wire          num2_s1_burst_adapter_source0_ready;                        // agent_pipeline_002:in_ready -> num2_s1_burst_adapter:source0_ready
	wire    [3:0] num2_s1_burst_adapter_source0_channel;                      // num2_s1_burst_adapter:source0_channel -> agent_pipeline_002:in_channel
	wire          num2_s1_burst_adapter_source0_startofpacket;                // num2_s1_burst_adapter:source0_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          num2_s1_burst_adapter_source0_endofpacket;                  // num2_s1_burst_adapter:source0_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                           // agent_pipeline_002:out_valid -> num2_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_002_source0_data;                            // agent_pipeline_002:out_data -> num2_s1_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                           // num2_s1_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [3:0] agent_pipeline_002_source0_channel;                         // agent_pipeline_002:out_channel -> num2_s1_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                   // agent_pipeline_002:out_startofpacket -> num2_s1_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                     // agent_pipeline_002:out_endofpacket -> num2_s1_agent:cp_endofpacket
	wire          num2_s1_agent_rp_valid;                                     // num2_s1_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [118:0] num2_s1_agent_rp_data;                                      // num2_s1_agent:rp_data -> agent_pipeline_003:in_data
	wire          num2_s1_agent_rp_ready;                                     // agent_pipeline_003:in_ready -> num2_s1_agent:rp_ready
	wire          num2_s1_agent_rp_startofpacket;                             // num2_s1_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          num2_s1_agent_rp_endofpacket;                               // num2_s1_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                           // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [118:0] agent_pipeline_003_source0_data;                            // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                           // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                   // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                     // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          result_s1_burst_adapter_source0_valid;                      // result_s1_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [118:0] result_s1_burst_adapter_source0_data;                       // result_s1_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          result_s1_burst_adapter_source0_ready;                      // agent_pipeline_004:in_ready -> result_s1_burst_adapter:source0_ready
	wire    [3:0] result_s1_burst_adapter_source0_channel;                    // result_s1_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          result_s1_burst_adapter_source0_startofpacket;              // result_s1_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          result_s1_burst_adapter_source0_endofpacket;                // result_s1_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                           // agent_pipeline_004:out_valid -> result_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_004_source0_data;                            // agent_pipeline_004:out_data -> result_s1_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                           // result_s1_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [3:0] agent_pipeline_004_source0_channel;                         // agent_pipeline_004:out_channel -> result_s1_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                   // agent_pipeline_004:out_startofpacket -> result_s1_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                     // agent_pipeline_004:out_endofpacket -> result_s1_agent:cp_endofpacket
	wire          result_s1_agent_rp_valid;                                   // result_s1_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [118:0] result_s1_agent_rp_data;                                    // result_s1_agent:rp_data -> agent_pipeline_005:in_data
	wire          result_s1_agent_rp_ready;                                   // agent_pipeline_005:in_ready -> result_s1_agent:rp_ready
	wire          result_s1_agent_rp_startofpacket;                           // result_s1_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          result_s1_agent_rp_endofpacket;                             // result_s1_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                           // agent_pipeline_005:out_valid -> router_004:sink_valid
	wire  [118:0] agent_pipeline_005_source0_data;                            // agent_pipeline_005:out_data -> router_004:sink_data
	wire          agent_pipeline_005_source0_ready;                           // router_004:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                   // agent_pipeline_005:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                     // agent_pipeline_005:out_endofpacket -> router_004:sink_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;            // onchip_memory2_0_s1_burst_adapter:source0_valid -> agent_pipeline_006:in_valid
	wire  [118:0] onchip_memory2_0_s1_burst_adapter_source0_data;             // onchip_memory2_0_s1_burst_adapter:source0_data -> agent_pipeline_006:in_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;            // agent_pipeline_006:in_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [3:0] onchip_memory2_0_s1_burst_adapter_source0_channel;          // onchip_memory2_0_s1_burst_adapter:source0_channel -> agent_pipeline_006:in_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;    // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;      // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                           // agent_pipeline_006:out_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [118:0] agent_pipeline_006_source0_data;                            // agent_pipeline_006:out_data -> onchip_memory2_0_s1_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                           // onchip_memory2_0_s1_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [3:0] agent_pipeline_006_source0_channel;                         // agent_pipeline_006:out_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                   // agent_pipeline_006:out_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                     // agent_pipeline_006:out_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                         // onchip_memory2_0_s1_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [118:0] onchip_memory2_0_s1_agent_rp_data;                          // onchip_memory2_0_s1_agent:rp_data -> agent_pipeline_007:in_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                         // agent_pipeline_007:in_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                 // onchip_memory2_0_s1_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                   // onchip_memory2_0_s1_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                           // agent_pipeline_007:out_valid -> router_005:sink_valid
	wire  [118:0] agent_pipeline_007_source0_data;                            // agent_pipeline_007:out_data -> router_005:sink_data
	wire          agent_pipeline_007_source0_ready;                           // router_005:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                   // agent_pipeline_007:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                     // agent_pipeline_007:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_demux_src0_valid;                                       // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [118:0] cmd_demux_src0_data;                                        // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                       // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                     // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                               // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                 // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                 // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [118:0] mux_pipeline_source0_data;                                  // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                 // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [3:0] mux_pipeline_source0_channel;                               // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                         // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                           // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                   // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [118:0] cmd_demux_001_src0_data;                                    // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                   // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                 // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                           // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                             // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                             // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire  [118:0] mux_pipeline_001_source0_data;                              // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                             // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire    [3:0] mux_pipeline_001_source0_channel;                           // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                     // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                       // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_src1_valid;                                       // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire  [118:0] cmd_demux_src1_data;                                        // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                       // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                     // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                               // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                 // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                             // mux_pipeline_002:out_valid -> cmd_mux_001:sink0_valid
	wire  [118:0] mux_pipeline_002_source0_data;                              // mux_pipeline_002:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_002_source0_ready;                             // cmd_mux_001:sink0_ready -> mux_pipeline_002:out_ready
	wire    [3:0] mux_pipeline_002_source0_channel;                           // mux_pipeline_002:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                     // mux_pipeline_002:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                       // mux_pipeline_002:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                   // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire  [118:0] cmd_demux_001_src1_data;                                    // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                   // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                 // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                           // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                             // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                             // mux_pipeline_003:out_valid -> cmd_mux_001:sink1_valid
	wire  [118:0] mux_pipeline_003_source0_data;                              // mux_pipeline_003:out_data -> cmd_mux_001:sink1_data
	wire          mux_pipeline_003_source0_ready;                             // cmd_mux_001:sink1_ready -> mux_pipeline_003:out_ready
	wire    [3:0] mux_pipeline_003_source0_channel;                           // mux_pipeline_003:out_channel -> cmd_mux_001:sink1_channel
	wire          mux_pipeline_003_source0_startofpacket;                     // mux_pipeline_003:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                       // mux_pipeline_003:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_src2_valid;                                       // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire  [118:0] cmd_demux_src2_data;                                        // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                       // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                     // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                               // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                 // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                             // mux_pipeline_004:out_valid -> cmd_mux_002:sink0_valid
	wire  [118:0] mux_pipeline_004_source0_data;                              // mux_pipeline_004:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_004_source0_ready;                             // cmd_mux_002:sink0_ready -> mux_pipeline_004:out_ready
	wire    [3:0] mux_pipeline_004_source0_channel;                           // mux_pipeline_004:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                     // mux_pipeline_004:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                       // mux_pipeline_004:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                   // cmd_demux_001:src2_valid -> mux_pipeline_005:in_valid
	wire  [118:0] cmd_demux_001_src2_data;                                    // cmd_demux_001:src2_data -> mux_pipeline_005:in_data
	wire          cmd_demux_001_src2_ready;                                   // mux_pipeline_005:in_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                 // cmd_demux_001:src2_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_001_src2_startofpacket;                           // cmd_demux_001:src2_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                             // cmd_demux_001:src2_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                             // mux_pipeline_005:out_valid -> cmd_mux_002:sink1_valid
	wire  [118:0] mux_pipeline_005_source0_data;                              // mux_pipeline_005:out_data -> cmd_mux_002:sink1_data
	wire          mux_pipeline_005_source0_ready;                             // cmd_mux_002:sink1_ready -> mux_pipeline_005:out_ready
	wire    [3:0] mux_pipeline_005_source0_channel;                           // mux_pipeline_005:out_channel -> cmd_mux_002:sink1_channel
	wire          mux_pipeline_005_source0_startofpacket;                     // mux_pipeline_005:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                       // mux_pipeline_005:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_src3_valid;                                       // cmd_demux:src3_valid -> mux_pipeline_006:in_valid
	wire  [118:0] cmd_demux_src3_data;                                        // cmd_demux:src3_data -> mux_pipeline_006:in_data
	wire          cmd_demux_src3_ready;                                       // mux_pipeline_006:in_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                     // cmd_demux:src3_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_src3_startofpacket;                               // cmd_demux:src3_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                 // cmd_demux:src3_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                             // mux_pipeline_006:out_valid -> cmd_mux_003:sink0_valid
	wire  [118:0] mux_pipeline_006_source0_data;                              // mux_pipeline_006:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_006_source0_ready;                             // cmd_mux_003:sink0_ready -> mux_pipeline_006:out_ready
	wire    [3:0] mux_pipeline_006_source0_channel;                           // mux_pipeline_006:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                     // mux_pipeline_006:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                       // mux_pipeline_006:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                   // cmd_demux_001:src3_valid -> mux_pipeline_007:in_valid
	wire  [118:0] cmd_demux_001_src3_data;                                    // cmd_demux_001:src3_data -> mux_pipeline_007:in_data
	wire          cmd_demux_001_src3_ready;                                   // mux_pipeline_007:in_ready -> cmd_demux_001:src3_ready
	wire    [3:0] cmd_demux_001_src3_channel;                                 // cmd_demux_001:src3_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_001_src3_startofpacket;                           // cmd_demux_001:src3_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                             // cmd_demux_001:src3_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                             // mux_pipeline_007:out_valid -> cmd_mux_003:sink1_valid
	wire  [118:0] mux_pipeline_007_source0_data;                              // mux_pipeline_007:out_data -> cmd_mux_003:sink1_data
	wire          mux_pipeline_007_source0_ready;                             // cmd_mux_003:sink1_ready -> mux_pipeline_007:out_ready
	wire    [3:0] mux_pipeline_007_source0_channel;                           // mux_pipeline_007:out_channel -> cmd_mux_003:sink1_channel
	wire          mux_pipeline_007_source0_startofpacket;                     // mux_pipeline_007:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                       // mux_pipeline_007:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                       // rsp_demux:src0_valid -> mux_pipeline_008:in_valid
	wire  [118:0] rsp_demux_src0_data;                                        // rsp_demux:src0_data -> mux_pipeline_008:in_data
	wire          rsp_demux_src0_ready;                                       // mux_pipeline_008:in_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                     // rsp_demux:src0_channel -> mux_pipeline_008:in_channel
	wire          rsp_demux_src0_startofpacket;                               // rsp_demux:src0_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                 // rsp_demux:src0_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                             // mux_pipeline_008:out_valid -> rsp_mux:sink0_valid
	wire  [118:0] mux_pipeline_008_source0_data;                              // mux_pipeline_008:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_008_source0_ready;                             // rsp_mux:sink0_ready -> mux_pipeline_008:out_ready
	wire    [3:0] mux_pipeline_008_source0_channel;                           // mux_pipeline_008:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                     // mux_pipeline_008:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                       // mux_pipeline_008:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                   // rsp_demux_001:src0_valid -> mux_pipeline_009:in_valid
	wire  [118:0] rsp_demux_001_src0_data;                                    // rsp_demux_001:src0_data -> mux_pipeline_009:in_data
	wire          rsp_demux_001_src0_ready;                                   // mux_pipeline_009:in_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                 // rsp_demux_001:src0_channel -> mux_pipeline_009:in_channel
	wire          rsp_demux_001_src0_startofpacket;                           // rsp_demux_001:src0_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                             // rsp_demux_001:src0_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                             // mux_pipeline_009:out_valid -> rsp_mux:sink1_valid
	wire  [118:0] mux_pipeline_009_source0_data;                              // mux_pipeline_009:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_009_source0_ready;                             // rsp_mux:sink1_ready -> mux_pipeline_009:out_ready
	wire    [3:0] mux_pipeline_009_source0_channel;                           // mux_pipeline_009:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_009_source0_startofpacket;                     // mux_pipeline_009:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                       // mux_pipeline_009:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                   // rsp_demux_002:src0_valid -> mux_pipeline_010:in_valid
	wire  [118:0] rsp_demux_002_src0_data;                                    // rsp_demux_002:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_002_src0_ready;                                   // mux_pipeline_010:in_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                 // rsp_demux_002:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_002_src0_startofpacket;                           // rsp_demux_002:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                             // rsp_demux_002:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                             // mux_pipeline_010:out_valid -> rsp_mux:sink2_valid
	wire  [118:0] mux_pipeline_010_source0_data;                              // mux_pipeline_010:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_010_source0_ready;                             // rsp_mux:sink2_ready -> mux_pipeline_010:out_ready
	wire    [3:0] mux_pipeline_010_source0_channel;                           // mux_pipeline_010:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_010_source0_startofpacket;                     // mux_pipeline_010:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                       // mux_pipeline_010:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                   // rsp_demux_003:src0_valid -> mux_pipeline_011:in_valid
	wire  [118:0] rsp_demux_003_src0_data;                                    // rsp_demux_003:src0_data -> mux_pipeline_011:in_data
	wire          rsp_demux_003_src0_ready;                                   // mux_pipeline_011:in_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                 // rsp_demux_003:src0_channel -> mux_pipeline_011:in_channel
	wire          rsp_demux_003_src0_startofpacket;                           // rsp_demux_003:src0_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                             // rsp_demux_003:src0_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                             // mux_pipeline_011:out_valid -> rsp_mux:sink3_valid
	wire  [118:0] mux_pipeline_011_source0_data;                              // mux_pipeline_011:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_011_source0_ready;                             // rsp_mux:sink3_ready -> mux_pipeline_011:out_ready
	wire    [3:0] mux_pipeline_011_source0_channel;                           // mux_pipeline_011:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_011_source0_startofpacket;                     // mux_pipeline_011:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                       // mux_pipeline_011:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_src1_valid;                                       // rsp_demux:src1_valid -> mux_pipeline_012:in_valid
	wire  [118:0] rsp_demux_src1_data;                                        // rsp_demux:src1_data -> mux_pipeline_012:in_data
	wire          rsp_demux_src1_ready;                                       // mux_pipeline_012:in_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                     // rsp_demux:src1_channel -> mux_pipeline_012:in_channel
	wire          rsp_demux_src1_startofpacket;                               // rsp_demux:src1_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                 // rsp_demux:src1_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                             // mux_pipeline_012:out_valid -> rsp_mux_001:sink0_valid
	wire  [118:0] mux_pipeline_012_source0_data;                              // mux_pipeline_012:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_012_source0_ready;                             // rsp_mux_001:sink0_ready -> mux_pipeline_012:out_ready
	wire    [3:0] mux_pipeline_012_source0_channel;                           // mux_pipeline_012:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_012_source0_startofpacket;                     // mux_pipeline_012:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                       // mux_pipeline_012:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                   // rsp_demux_001:src1_valid -> mux_pipeline_013:in_valid
	wire  [118:0] rsp_demux_001_src1_data;                                    // rsp_demux_001:src1_data -> mux_pipeline_013:in_data
	wire          rsp_demux_001_src1_ready;                                   // mux_pipeline_013:in_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                 // rsp_demux_001:src1_channel -> mux_pipeline_013:in_channel
	wire          rsp_demux_001_src1_startofpacket;                           // rsp_demux_001:src1_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                             // rsp_demux_001:src1_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                             // mux_pipeline_013:out_valid -> rsp_mux_001:sink1_valid
	wire  [118:0] mux_pipeline_013_source0_data;                              // mux_pipeline_013:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_013_source0_ready;                             // rsp_mux_001:sink1_ready -> mux_pipeline_013:out_ready
	wire    [3:0] mux_pipeline_013_source0_channel;                           // mux_pipeline_013:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_013_source0_startofpacket;                     // mux_pipeline_013:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                       // mux_pipeline_013:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                   // rsp_demux_002:src1_valid -> mux_pipeline_014:in_valid
	wire  [118:0] rsp_demux_002_src1_data;                                    // rsp_demux_002:src1_data -> mux_pipeline_014:in_data
	wire          rsp_demux_002_src1_ready;                                   // mux_pipeline_014:in_ready -> rsp_demux_002:src1_ready
	wire    [3:0] rsp_demux_002_src1_channel;                                 // rsp_demux_002:src1_channel -> mux_pipeline_014:in_channel
	wire          rsp_demux_002_src1_startofpacket;                           // rsp_demux_002:src1_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                             // rsp_demux_002:src1_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                             // mux_pipeline_014:out_valid -> rsp_mux_001:sink2_valid
	wire  [118:0] mux_pipeline_014_source0_data;                              // mux_pipeline_014:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_014_source0_ready;                             // rsp_mux_001:sink2_ready -> mux_pipeline_014:out_ready
	wire    [3:0] mux_pipeline_014_source0_channel;                           // mux_pipeline_014:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_014_source0_startofpacket;                     // mux_pipeline_014:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                       // mux_pipeline_014:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src1_valid;                                   // rsp_demux_003:src1_valid -> mux_pipeline_015:in_valid
	wire  [118:0] rsp_demux_003_src1_data;                                    // rsp_demux_003:src1_data -> mux_pipeline_015:in_data
	wire          rsp_demux_003_src1_ready;                                   // mux_pipeline_015:in_ready -> rsp_demux_003:src1_ready
	wire    [3:0] rsp_demux_003_src1_channel;                                 // rsp_demux_003:src1_channel -> mux_pipeline_015:in_channel
	wire          rsp_demux_003_src1_startofpacket;                           // rsp_demux_003:src1_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                             // rsp_demux_003:src1_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                             // mux_pipeline_015:out_valid -> rsp_mux_001:sink3_valid
	wire  [118:0] mux_pipeline_015_source0_data;                              // mux_pipeline_015:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_015_source0_ready;                             // rsp_mux_001:sink3_ready -> mux_pipeline_015:out_ready
	wire    [3:0] mux_pipeline_015_source0_channel;                           // mux_pipeline_015:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_015_source0_startofpacket;                     // mux_pipeline_015:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                       // mux_pipeline_015:out_endofpacket -> rsp_mux_001:sink3_endofpacket

	qsys_top_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) num1_s1_translator (
		.clk                    (clock_bridge_0_out_clk_clk),             //   input,   width = 1,                      clk.clk
		.reset                  (num1_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (num1_s1_agent_m0_address),               //   input,  width = 21, avalon_universal_slave_0.address
		.uav_burstcount         (num1_s1_agent_m0_burstcount),            //   input,   width = 3,                         .burstcount
		.uav_read               (num1_s1_agent_m0_read),                  //   input,   width = 1,                         .read
		.uav_write              (num1_s1_agent_m0_write),                 //   input,   width = 1,                         .write
		.uav_waitrequest        (num1_s1_agent_m0_waitrequest),           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (num1_s1_agent_m0_readdatavalid),         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (num1_s1_agent_m0_byteenable),            //   input,   width = 4,                         .byteenable
		.uav_readdata           (num1_s1_agent_m0_readdata),              //  output,  width = 32,                         .readdata
		.uav_writedata          (num1_s1_agent_m0_writedata),             //   input,  width = 32,                         .writedata
		.uav_lock               (num1_s1_agent_m0_lock),                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (num1_s1_agent_m0_debugaccess),           //   input,   width = 1,                         .debugaccess
		.av_address             (num1_s1_address),                        //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (num1_s1_write),                          //  output,   width = 1,                         .write
		.av_readdata            (num1_s1_readdata),                       //   input,  width = 32,                         .readdata
		.av_writedata           (num1_s1_writedata),                      //  output,  width = 32,                         .writedata
		.av_chipselect          (num1_s1_chipselect),                     //  output,   width = 1,                         .chipselect
		.av_read                (),                                       // (terminated),                                       
		.av_begintransfer       (),                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                       // (terminated),                                       
		.av_burstcount          (),                                       // (terminated),                                       
		.av_byteenable          (),                                       // (terminated),                                       
		.av_readdatavalid       (1'b0),                                   // (terminated),                                       
		.av_waitrequest         (1'b0),                                   // (terminated),                                       
		.av_writebyteenable     (),                                       // (terminated),                                       
		.av_lock                (),                                       // (terminated),                                       
		.av_clken               (),                                       // (terminated),                                       
		.uav_clken              (1'b0),                                   // (terminated),                                       
		.av_debugaccess         (),                                       // (terminated),                                       
		.av_outputenable        (),                                       // (terminated),                                       
		.uav_response           (),                                       // (terminated),                                       
		.av_response            (2'b00),                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                    // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) num2_s1_translator (
		.clk                    (clock_bridge_0_out_clk_clk),             //   input,   width = 1,                      clk.clk
		.reset                  (num1_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (num2_s1_agent_m0_address),               //   input,  width = 21, avalon_universal_slave_0.address
		.uav_burstcount         (num2_s1_agent_m0_burstcount),            //   input,   width = 3,                         .burstcount
		.uav_read               (num2_s1_agent_m0_read),                  //   input,   width = 1,                         .read
		.uav_write              (num2_s1_agent_m0_write),                 //   input,   width = 1,                         .write
		.uav_waitrequest        (num2_s1_agent_m0_waitrequest),           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (num2_s1_agent_m0_readdatavalid),         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (num2_s1_agent_m0_byteenable),            //   input,   width = 4,                         .byteenable
		.uav_readdata           (num2_s1_agent_m0_readdata),              //  output,  width = 32,                         .readdata
		.uav_writedata          (num2_s1_agent_m0_writedata),             //   input,  width = 32,                         .writedata
		.uav_lock               (num2_s1_agent_m0_lock),                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (num2_s1_agent_m0_debugaccess),           //   input,   width = 1,                         .debugaccess
		.av_address             (num2_s1_address),                        //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (num2_s1_write),                          //  output,   width = 1,                         .write
		.av_readdata            (num2_s1_readdata),                       //   input,  width = 32,                         .readdata
		.av_writedata           (num2_s1_writedata),                      //  output,  width = 32,                         .writedata
		.av_chipselect          (num2_s1_chipselect),                     //  output,   width = 1,                         .chipselect
		.av_read                (),                                       // (terminated),                                       
		.av_begintransfer       (),                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                       // (terminated),                                       
		.av_burstcount          (),                                       // (terminated),                                       
		.av_byteenable          (),                                       // (terminated),                                       
		.av_readdatavalid       (1'b0),                                   // (terminated),                                       
		.av_waitrequest         (1'b0),                                   // (terminated),                                       
		.av_writebyteenable     (),                                       // (terminated),                                       
		.av_lock                (),                                       // (terminated),                                       
		.av_clken               (),                                       // (terminated),                                       
		.uav_clken              (1'b0),                                   // (terminated),                                       
		.av_debugaccess         (),                                       // (terminated),                                       
		.av_outputenable        (),                                       // (terminated),                                       
		.uav_response           (),                                       // (terminated),                                       
		.av_response            (2'b00),                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                    // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) result_s1_translator (
		.clk                    (clock_bridge_0_out_clk_clk),             //   input,   width = 1,                      clk.clk
		.reset                  (num1_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (result_s1_agent_m0_address),             //   input,  width = 21, avalon_universal_slave_0.address
		.uav_burstcount         (result_s1_agent_m0_burstcount),          //   input,   width = 3,                         .burstcount
		.uav_read               (result_s1_agent_m0_read),                //   input,   width = 1,                         .read
		.uav_write              (result_s1_agent_m0_write),               //   input,   width = 1,                         .write
		.uav_waitrequest        (result_s1_agent_m0_waitrequest),         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (result_s1_agent_m0_readdatavalid),       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (result_s1_agent_m0_byteenable),          //   input,   width = 4,                         .byteenable
		.uav_readdata           (result_s1_agent_m0_readdata),            //  output,  width = 32,                         .readdata
		.uav_writedata          (result_s1_agent_m0_writedata),           //   input,  width = 32,                         .writedata
		.uav_lock               (result_s1_agent_m0_lock),                //   input,   width = 1,                         .lock
		.uav_debugaccess        (result_s1_agent_m0_debugaccess),         //   input,   width = 1,                         .debugaccess
		.av_address             (result_s1_address),                      //  output,   width = 2,      avalon_anti_slave_0.address
		.av_readdata            (result_s1_readdata),                     //   input,  width = 32,                         .readdata
		.av_write               (),                                       // (terminated),                                       
		.av_read                (),                                       // (terminated),                                       
		.av_writedata           (),                                       // (terminated),                                       
		.av_begintransfer       (),                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                       // (terminated),                                       
		.av_burstcount          (),                                       // (terminated),                                       
		.av_byteenable          (),                                       // (terminated),                                       
		.av_readdatavalid       (1'b0),                                   // (terminated),                                       
		.av_waitrequest         (1'b0),                                   // (terminated),                                       
		.av_writebyteenable     (),                                       // (terminated),                                       
		.av_lock                (),                                       // (terminated),                                       
		.av_chipselect          (),                                       // (terminated),                                       
		.av_clken               (),                                       // (terminated),                                       
		.uav_clken              (1'b0),                                   // (terminated),                                       
		.av_debugaccess         (),                                       // (terminated),                                       
		.av_outputenable        (),                                       // (terminated),                                       
		.uav_response           (),                                       // (terminated),                                       
		.av_response            (2'b00),                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                    // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clock_bridge_0_out_clk_clk),                 //   input,   width = 1,                      clk.clk
		.reset                  (num1_reset_reset_bridge_in_reset_reset),     //   input,   width = 1,                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),       //   input,  width = 21, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                  //  output,   width = 1,                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),             //  output,   width = 4,                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),             //  output,   width = 1,                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                  //  output,   width = 1,                         .clken
		.av_read                (),                                           // (terminated),                                       
		.av_begintransfer       (),                                           // (terminated),                                       
		.av_beginbursttransfer  (),                                           // (terminated),                                       
		.av_burstcount          (),                                           // (terminated),                                       
		.av_readdatavalid       (1'b0),                                       // (terminated),                                       
		.av_waitrequest         (1'b0),                                       // (terminated),                                       
		.av_writebyteenable     (),                                           // (terminated),                                       
		.av_lock                (),                                           // (terminated),                                       
		.uav_clken              (1'b0),                                       // (terminated),                                       
		.av_debugaccess         (),                                           // (terminated),                                       
		.av_outputenable        (),                                           // (terminated),                                       
		.uav_response           (),                                           // (terminated),                                       
		.av_response            (2'b00),                                      // (terminated),                                       
		.uav_writeresponsevalid (),                                           // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                        // (terminated),                                       
	);

	qsys_top_altera_merlin_axi_master_ni_181_dp4ifgy #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (88),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_ADDR_SIDEBAND_H       (86),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (92),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (89),
		.PKT_QOS_H                 (89),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_DATA_SIDEBAND_H       (87),
		.PKT_DATA_SIDEBAND_L       (87),
		.PKT_DOMAIN_H              (117),
		.PKT_DOMAIN_L              (116),
		.PKT_SNOOP_H               (115),
		.PKT_SNOOP_L               (112),
		.PKT_BARRIER_H             (111),
		.PKT_BARRIER_L             (110),
		.PKT_WUNIQUE               (118),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (4),
		.ID                        (0),
		.SYNC_RESET                (0)
	) a10_hps_h2f_lw_axi_master_agent (
		.aclk                   (clock_bridge_0_out_clk_clk),                                 //   input,    width = 1,              clk.clk
		.aresetn                (~a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (a10_hps_h2f_lw_axi_master_agent_write_cp_valid),             //  output,    width = 1,         write_cp.valid
		.write_cp_data          (a10_hps_h2f_lw_axi_master_agent_write_cp_data),              //  output,  width = 119,                 .data
		.write_cp_startofpacket (a10_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),     //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (a10_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),       //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (a10_hps_h2f_lw_axi_master_agent_write_cp_ready),             //   input,    width = 1,                 .ready
		.write_rp_valid         (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),          //   input,  width = 119,                 .data
		.write_rp_channel       (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),       //   input,    width = 4,                 .channel
		.write_rp_startofpacket (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),         //  output,    width = 1,                 .ready
		.read_cp_valid          (a10_hps_h2f_lw_axi_master_agent_read_cp_valid),              //  output,    width = 1,          read_cp.valid
		.read_cp_data           (a10_hps_h2f_lw_axi_master_agent_read_cp_data),               //  output,  width = 119,                 .data
		.read_cp_startofpacket  (a10_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),      //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (a10_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),        //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (a10_hps_h2f_lw_axi_master_agent_read_cp_ready),              //   input,    width = 1,                 .ready
		.read_rp_valid          (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),         //   input,    width = 1,          read_rp.valid
		.read_rp_data           (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),          //   input,  width = 119,                 .data
		.read_rp_channel        (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),       //   input,    width = 4,                 .channel
		.read_rp_startofpacket  (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),         //  output,    width = 1,                 .ready
		.awid                   (a10_hps_h2f_lw_axi_master_awid),                             //   input,    width = 4, altera_axi_slave.awid
		.awaddr                 (a10_hps_h2f_lw_axi_master_awaddr),                           //   input,   width = 21,                 .awaddr
		.awlen                  (a10_hps_h2f_lw_axi_master_awlen),                            //   input,    width = 4,                 .awlen
		.awsize                 (a10_hps_h2f_lw_axi_master_awsize),                           //   input,    width = 3,                 .awsize
		.awburst                (a10_hps_h2f_lw_axi_master_awburst),                          //   input,    width = 2,                 .awburst
		.awlock                 (a10_hps_h2f_lw_axi_master_awlock),                           //   input,    width = 2,                 .awlock
		.awcache                (a10_hps_h2f_lw_axi_master_awcache),                          //   input,    width = 4,                 .awcache
		.awprot                 (a10_hps_h2f_lw_axi_master_awprot),                           //   input,    width = 3,                 .awprot
		.awuser                 (a10_hps_h2f_lw_axi_master_awuser),                           //   input,    width = 5,                 .awuser
		.awvalid                (a10_hps_h2f_lw_axi_master_awvalid),                          //   input,    width = 1,                 .awvalid
		.awready                (a10_hps_h2f_lw_axi_master_awready),                          //  output,    width = 1,                 .awready
		.wid                    (a10_hps_h2f_lw_axi_master_wid),                              //   input,    width = 4,                 .wid
		.wdata                  (a10_hps_h2f_lw_axi_master_wdata),                            //   input,   width = 32,                 .wdata
		.wstrb                  (a10_hps_h2f_lw_axi_master_wstrb),                            //   input,    width = 4,                 .wstrb
		.wlast                  (a10_hps_h2f_lw_axi_master_wlast),                            //   input,    width = 1,                 .wlast
		.wvalid                 (a10_hps_h2f_lw_axi_master_wvalid),                           //   input,    width = 1,                 .wvalid
		.wready                 (a10_hps_h2f_lw_axi_master_wready),                           //  output,    width = 1,                 .wready
		.bid                    (a10_hps_h2f_lw_axi_master_bid),                              //  output,    width = 4,                 .bid
		.bresp                  (a10_hps_h2f_lw_axi_master_bresp),                            //  output,    width = 2,                 .bresp
		.bvalid                 (a10_hps_h2f_lw_axi_master_bvalid),                           //  output,    width = 1,                 .bvalid
		.bready                 (a10_hps_h2f_lw_axi_master_bready),                           //   input,    width = 1,                 .bready
		.arid                   (a10_hps_h2f_lw_axi_master_arid),                             //   input,    width = 4,                 .arid
		.araddr                 (a10_hps_h2f_lw_axi_master_araddr),                           //   input,   width = 21,                 .araddr
		.arlen                  (a10_hps_h2f_lw_axi_master_arlen),                            //   input,    width = 4,                 .arlen
		.arsize                 (a10_hps_h2f_lw_axi_master_arsize),                           //   input,    width = 3,                 .arsize
		.arburst                (a10_hps_h2f_lw_axi_master_arburst),                          //   input,    width = 2,                 .arburst
		.arlock                 (a10_hps_h2f_lw_axi_master_arlock),                           //   input,    width = 2,                 .arlock
		.arcache                (a10_hps_h2f_lw_axi_master_arcache),                          //   input,    width = 4,                 .arcache
		.arprot                 (a10_hps_h2f_lw_axi_master_arprot),                           //   input,    width = 3,                 .arprot
		.aruser                 (a10_hps_h2f_lw_axi_master_aruser),                           //   input,    width = 5,                 .aruser
		.arvalid                (a10_hps_h2f_lw_axi_master_arvalid),                          //   input,    width = 1,                 .arvalid
		.arready                (a10_hps_h2f_lw_axi_master_arready),                          //  output,    width = 1,                 .arready
		.rid                    (a10_hps_h2f_lw_axi_master_rid),                              //  output,    width = 4,                 .rid
		.rdata                  (a10_hps_h2f_lw_axi_master_rdata),                            //  output,   width = 32,                 .rdata
		.rresp                  (a10_hps_h2f_lw_axi_master_rresp),                            //  output,    width = 2,                 .rresp
		.rlast                  (a10_hps_h2f_lw_axi_master_rlast),                            //  output,    width = 1,                 .rlast
		.rvalid                 (a10_hps_h2f_lw_axi_master_rvalid),                           //  output,    width = 1,                 .rvalid
		.rready                 (a10_hps_h2f_lw_axi_master_rready),                           //   input,    width = 1,                 .rready
		.awqos                  (4'b0000),                                                    // (terminated),                                
		.arqos                  (4'b0000),                                                    // (terminated),                                
		.awregion               (4'b0000),                                                    // (terminated),                                
		.arregion               (4'b0000),                                                    // (terminated),                                
		.wuser                  (1'b0),                                                       // (terminated),                                
		.ruser                  (),                                                           // (terminated),                                
		.buser                  ()                                                            // (terminated),                                
	);

	qsys_top_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) num1_s1_agent (
		.clk                     (clock_bridge_0_out_clk_clk),               //   input,    width = 1,             clk.clk
		.reset                   (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,       clk_reset.reset
		.m0_address              (num1_s1_agent_m0_address),                 //  output,   width = 21,              m0.address
		.m0_burstcount           (num1_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (num1_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (num1_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (num1_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (num1_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (num1_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (num1_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (num1_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (num1_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (num1_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (num1_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (num1_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (num1_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (num1_s1_agent_rp_data),                    //  output,  width = 119,                .data
		.rp_startofpacket        (num1_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),             //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),             //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),              //   input,  width = 119,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),     //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),       //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),           //   input,    width = 4,                .channel
		.rf_sink_ready           (num1_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (num1_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (num1_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (num1_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (num1_s1_agent_rsp_fifo_out_data),          //   input,  width = 120,                .data
		.rf_source_ready         (num1_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (num1_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (num1_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (num1_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (num1_s1_agent_rf_source_data),             //  output,  width = 120,                .data
		.rdata_fifo_sink_ready   (num1_s1_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (num1_s1_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (num1_s1_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (num1_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (num1_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (num1_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                      // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) num1_s1_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (num1_s1_agent_rf_source_data),             //   input,  width = 120,        in.data
		.in_valid          (num1_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (num1_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (num1_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (num1_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (num1_s1_agent_rsp_fifo_out_data),          //  output,  width = 120,       out.data
		.out_valid         (num1_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (num1_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (num1_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (num1_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                    // (terminated),                         
		.csr_read          (1'b0),                                     // (terminated),                         
		.csr_write         (1'b0),                                     // (terminated),                         
		.csr_readdata      (),                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated),                         
		.almost_full_data  (),                                         // (terminated),                         
		.almost_empty_data (),                                         // (terminated),                         
		.in_empty          (1'b0),                                     // (terminated),                         
		.out_empty         (),                                         // (terminated),                         
		.in_error          (1'b0),                                     // (terminated),                         
		.out_error         (),                                         // (terminated),                         
		.in_channel        (1'b0),                                     // (terminated),                         
		.out_channel       ()                                          // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) num1_s1_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,   width = 1,       clk.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (num1_s1_agent_rdata_fifo_src_data),      //   input,  width = 34,        in.data
		.in_valid          (num1_s1_agent_rdata_fifo_src_valid),     //   input,   width = 1,          .valid
		.in_ready          (num1_s1_agent_rdata_fifo_src_ready),     //  output,   width = 1,          .ready
		.out_data          (num1_s1_agent_rdata_fifo_out_data),      //  output,  width = 34,       out.data
		.out_valid         (num1_s1_agent_rdata_fifo_out_valid),     //  output,   width = 1,          .valid
		.out_ready         (num1_s1_agent_rdata_fifo_out_ready),     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                  // (terminated),                        
		.csr_read          (1'b0),                                   // (terminated),                        
		.csr_write         (1'b0),                                   // (terminated),                        
		.csr_readdata      (),                                       // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated),                        
		.almost_full_data  (),                                       // (terminated),                        
		.almost_empty_data (),                                       // (terminated),                        
		.in_startofpacket  (1'b0),                                   // (terminated),                        
		.in_endofpacket    (1'b0),                                   // (terminated),                        
		.out_startofpacket (),                                       // (terminated),                        
		.out_endofpacket   (),                                       // (terminated),                        
		.in_empty          (1'b0),                                   // (terminated),                        
		.out_empty         (),                                       // (terminated),                        
		.in_error          (1'b0),                                   // (terminated),                        
		.out_error         (),                                       // (terminated),                        
		.in_channel        (1'b0),                                   // (terminated),                        
		.out_channel       ()                                        // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) num2_s1_agent (
		.clk                     (clock_bridge_0_out_clk_clk),               //   input,    width = 1,             clk.clk
		.reset                   (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,       clk_reset.reset
		.m0_address              (num2_s1_agent_m0_address),                 //  output,   width = 21,              m0.address
		.m0_burstcount           (num2_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (num2_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (num2_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (num2_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (num2_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (num2_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (num2_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (num2_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (num2_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (num2_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (num2_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (num2_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (num2_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (num2_s1_agent_rp_data),                    //  output,  width = 119,                .data
		.rp_startofpacket        (num2_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_002_source0_data),          //   input,  width = 119,                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),       //   input,    width = 4,                .channel
		.rf_sink_ready           (num2_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (num2_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (num2_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (num2_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (num2_s1_agent_rsp_fifo_out_data),          //   input,  width = 120,                .data
		.rf_source_ready         (num2_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (num2_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (num2_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (num2_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (num2_s1_agent_rf_source_data),             //  output,  width = 120,                .data
		.rdata_fifo_sink_ready   (num2_s1_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (num2_s1_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (num2_s1_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (num2_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (num2_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (num2_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                      // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) num2_s1_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (num2_s1_agent_rf_source_data),             //   input,  width = 120,        in.data
		.in_valid          (num2_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (num2_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (num2_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (num2_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (num2_s1_agent_rsp_fifo_out_data),          //  output,  width = 120,       out.data
		.out_valid         (num2_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (num2_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (num2_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (num2_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                    // (terminated),                         
		.csr_read          (1'b0),                                     // (terminated),                         
		.csr_write         (1'b0),                                     // (terminated),                         
		.csr_readdata      (),                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated),                         
		.almost_full_data  (),                                         // (terminated),                         
		.almost_empty_data (),                                         // (terminated),                         
		.in_empty          (1'b0),                                     // (terminated),                         
		.out_empty         (),                                         // (terminated),                         
		.in_error          (1'b0),                                     // (terminated),                         
		.out_error         (),                                         // (terminated),                         
		.in_channel        (1'b0),                                     // (terminated),                         
		.out_channel       ()                                          // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) num2_s1_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,   width = 1,       clk.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (num2_s1_agent_rdata_fifo_src_data),      //   input,  width = 34,        in.data
		.in_valid          (num2_s1_agent_rdata_fifo_src_valid),     //   input,   width = 1,          .valid
		.in_ready          (num2_s1_agent_rdata_fifo_src_ready),     //  output,   width = 1,          .ready
		.out_data          (num2_s1_agent_rdata_fifo_out_data),      //  output,  width = 34,       out.data
		.out_valid         (num2_s1_agent_rdata_fifo_out_valid),     //  output,   width = 1,          .valid
		.out_ready         (num2_s1_agent_rdata_fifo_out_ready),     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                  // (terminated),                        
		.csr_read          (1'b0),                                   // (terminated),                        
		.csr_write         (1'b0),                                   // (terminated),                        
		.csr_readdata      (),                                       // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated),                        
		.almost_full_data  (),                                       // (terminated),                        
		.almost_empty_data (),                                       // (terminated),                        
		.in_startofpacket  (1'b0),                                   // (terminated),                        
		.in_endofpacket    (1'b0),                                   // (terminated),                        
		.out_startofpacket (),                                       // (terminated),                        
		.out_endofpacket   (),                                       // (terminated),                        
		.in_empty          (1'b0),                                   // (terminated),                        
		.out_empty         (),                                       // (terminated),                        
		.in_error          (1'b0),                                   // (terminated),                        
		.out_error         (),                                       // (terminated),                        
		.in_channel        (1'b0),                                   // (terminated),                        
		.out_channel       ()                                        // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) result_s1_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                 //   input,    width = 1,             clk.clk
		.reset                   (num1_reset_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (result_s1_agent_m0_address),                 //  output,   width = 21,              m0.address
		.m0_burstcount           (result_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (result_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (result_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (result_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (result_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (result_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (result_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (result_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (result_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (result_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (result_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (result_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (result_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (result_s1_agent_rp_data),                    //  output,  width = 119,                .data
		.rp_startofpacket        (result_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),           //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),           //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_004_source0_data),            //   input,  width = 119,                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),   //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),     //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),         //   input,    width = 4,                .channel
		.rf_sink_ready           (result_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (result_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (result_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (result_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (result_s1_agent_rsp_fifo_out_data),          //   input,  width = 120,                .data
		.rf_source_ready         (result_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (result_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (result_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (result_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (result_s1_agent_rf_source_data),             //  output,  width = 120,                .data
		.rdata_fifo_sink_ready   (result_s1_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (result_s1_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (result_s1_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (result_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (result_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (result_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                        // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result_s1_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                 //   input,    width = 1,       clk.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_data           (result_s1_agent_rf_source_data),             //   input,  width = 120,        in.data
		.in_valid          (result_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (result_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (result_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (result_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (result_s1_agent_rsp_fifo_out_data),          //  output,  width = 120,       out.data
		.out_valid         (result_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (result_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (result_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (result_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                      // (terminated),                         
		.csr_read          (1'b0),                                       // (terminated),                         
		.csr_write         (1'b0),                                       // (terminated),                         
		.csr_readdata      (),                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated),                         
		.almost_full_data  (),                                           // (terminated),                         
		.almost_empty_data (),                                           // (terminated),                         
		.in_empty          (1'b0),                                       // (terminated),                         
		.out_empty         (),                                           // (terminated),                         
		.in_error          (1'b0),                                       // (terminated),                         
		.out_error         (),                                           // (terminated),                         
		.in_channel        (1'b0),                                       // (terminated),                         
		.out_channel       ()                                            // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result_s1_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,   width = 1,       clk.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (result_s1_agent_rdata_fifo_src_data),    //   input,  width = 34,        in.data
		.in_valid          (result_s1_agent_rdata_fifo_src_valid),   //   input,   width = 1,          .valid
		.in_ready          (result_s1_agent_rdata_fifo_src_ready),   //  output,   width = 1,          .ready
		.out_data          (result_s1_agent_rdata_fifo_out_data),    //  output,  width = 34,       out.data
		.out_valid         (result_s1_agent_rdata_fifo_out_valid),   //  output,   width = 1,          .valid
		.out_ready         (result_s1_agent_rdata_fifo_out_ready),   //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                  // (terminated),                        
		.csr_read          (1'b0),                                   // (terminated),                        
		.csr_write         (1'b0),                                   // (terminated),                        
		.csr_readdata      (),                                       // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated),                        
		.almost_full_data  (),                                       // (terminated),                        
		.almost_empty_data (),                                       // (terminated),                        
		.in_startofpacket  (1'b0),                                   // (terminated),                        
		.in_endofpacket    (1'b0),                                   // (terminated),                        
		.out_startofpacket (),                                       // (terminated),                        
		.out_endofpacket   (),                                       // (terminated),                        
		.in_empty          (1'b0),                                   // (terminated),                        
		.out_empty         (),                                       // (terminated),                        
		.in_error          (1'b0),                                   // (terminated),                        
		.out_error         (),                                       // (terminated),                        
		.in_channel        (1'b0),                                   // (terminated),                        
		.out_channel       ()                                        // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,             clk.clk
		.reset                   (num1_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //  output,   width = 21,              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //  output,  width = 119,                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                     //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                     //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                      //   input,  width = 119,                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),               //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                   //   input,    width = 4,                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //   input,  width = 120,                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //  output,  width = 120,                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //   input,  width = 120,        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //  output,  width = 120,       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                     //   input,   width = 1,       clk.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                          // (terminated),                        
		.csr_read          (1'b0),                                           // (terminated),                        
		.csr_write         (1'b0),                                           // (terminated),                        
		.csr_readdata      (),                                               // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated),                        
		.almost_full_data  (),                                               // (terminated),                        
		.almost_empty_data (),                                               // (terminated),                        
		.in_startofpacket  (1'b0),                                           // (terminated),                        
		.in_endofpacket    (1'b0),                                           // (terminated),                        
		.out_startofpacket (),                                               // (terminated),                        
		.out_endofpacket   (),                                               // (terminated),                        
		.in_empty          (1'b0),                                           // (terminated),                        
		.out_empty         (),                                               // (terminated),                        
		.in_error          (1'b0),                                           // (terminated),                        
		.out_error         (),                                               // (terminated),                        
		.in_channel        (1'b0),                                           // (terminated),                        
		.out_channel       ()                                                // (terminated),                        
	);

	qsys_top_altera_merlin_router_181_kb4tzeq router (
		.sink_ready         (a10_hps_h2f_lw_axi_master_agent_write_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (a10_hps_h2f_lw_axi_master_agent_write_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (a10_hps_h2f_lw_axi_master_agent_write_cp_data),          //   input,  width = 119,          .data
		.sink_startofpacket (a10_hps_h2f_lw_axi_master_agent_write_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (a10_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                        //  output,  width = 119,          .data
		.src_channel        (router_src_channel),                                     //  output,    width = 4,          .channel
		.src_startofpacket  (router_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_181_kb4tzeq router_001 (
		.sink_ready         (a10_hps_h2f_lw_axi_master_agent_read_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (a10_hps_h2f_lw_axi_master_agent_read_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (a10_hps_h2f_lw_axi_master_agent_read_cp_data),          //   input,  width = 119,          .data
		.sink_startofpacket (a10_hps_h2f_lw_axi_master_agent_read_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (a10_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset              (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                   //  output,  width = 119,          .data
		.src_channel        (router_001_src_channel),                                //  output,    width = 4,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_181_kuy5svy router_002 (
		.sink_ready         (agent_pipeline_001_source0_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),         //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),          //   input,  width = 119,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                     //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                      //  output,  width = 119,          .data
		.src_channel        (router_002_src_channel),                   //  output,    width = 4,          .channel
		.src_startofpacket  (router_002_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_181_kuy5svy router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),         //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_003_source0_data),          //   input,  width = 119,          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                     //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                      //  output,  width = 119,          .data
		.src_channel        (router_003_src_channel),                   //  output,    width = 4,          .channel
		.src_startofpacket  (router_003_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_181_kuy5svy router_004 (
		.sink_ready         (agent_pipeline_005_source0_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),         //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_005_source0_data),          //   input,  width = 119,          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                     //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                      //  output,  width = 119,          .data
		.src_channel        (router_004_src_channel),                   //  output,    width = 4,          .channel
		.src_startofpacket  (router_004_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_181_kuy5svy router_005 (
		.sink_ready         (agent_pipeline_007_source0_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),         //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_007_source0_data),          //   input,  width = 119,          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                     //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                      //  output,  width = 119,          .data
		.src_channel        (router_005_src_channel),                   //  output,    width = 4,          .channel
		.src_startofpacket  (router_005_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_traffic_limiter_181_reppfiq #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (92),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (90),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) a10_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (clock_bridge_0_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                  (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                           //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                           //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                            //   input,  width = 119,          .data
		.cmd_sink_channel       (router_src_channel),                                         //   input,    width = 4,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),          //  output,  width = 119,          .data
		.cmd_src_channel        (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),       //  output,    width = 4,          .channel
		.cmd_src_startofpacket  (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid),         //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                         //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                         //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                       //   input,    width = 4,          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                          //   input,  width = 119,          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),          //  output,  width = 119,          .data
		.rsp_src_channel        (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),       //  output,    width = 4,          .channel
		.rsp_src_startofpacket  (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (a10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket)    //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_traffic_limiter_181_reppfiq #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (92),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (90),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) a10_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (clock_bridge_0_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                  (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                       //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                       //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                        //   input,  width = 119,          .data
		.cmd_sink_channel       (router_001_src_channel),                                     //   input,    width = 4,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),          //  output,  width = 119,          .data
		.cmd_src_channel        (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),       //  output,    width = 4,          .channel
		.cmd_src_startofpacket  (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid),         //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                         //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                         //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                       //   input,    width = 4,          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                          //   input,  width = 119,          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),          //  output,  width = 119,          .data
		.rsp_src_channel        (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),       //  output,    width = 4,          .channel
		.rsp_src_startofpacket  (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (a10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket)    //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_burst_adapter_181_efhh5ua #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) num1_s1_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                  //   input,    width = 1,       cr0.clk
		.reset                 (num1_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                           //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                            //   input,  width = 119,          .data
		.sink0_channel         (cmd_mux_src_channel),                         //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                           //  output,    width = 1,          .ready
		.source0_valid         (num1_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (num1_s1_burst_adapter_source0_data),          //  output,  width = 119,          .data
		.source0_channel       (num1_s1_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (num1_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (num1_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (num1_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_burst_adapter_181_efhh5ua #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) num2_s1_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                  //   input,    width = 1,       cr0.clk
		.reset                 (num1_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                       //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                        //   input,  width = 119,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                     //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                       //  output,    width = 1,          .ready
		.source0_valid         (num2_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (num2_s1_burst_adapter_source0_data),          //  output,  width = 119,          .data
		.source0_channel       (num2_s1_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (num2_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (num2_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (num2_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_burst_adapter_181_efhh5ua #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) result_s1_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                    //   input,    width = 1,       cr0.clk
		.reset                 (num1_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                         //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                          //   input,  width = 119,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                       //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                         //  output,    width = 1,          .ready
		.source0_valid         (result_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (result_s1_burst_adapter_source0_data),          //  output,  width = 119,          .data
		.source0_channel       (result_s1_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (result_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (result_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (result_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_burst_adapter_181_efhh5ua #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                              //   input,    width = 1,       cr0.clk
		.reset                 (num1_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                   //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                    //   input,  width = 119,          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                 //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                   //  output,    width = 1,          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //  output,  width = 119,          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_demultiplexer_181_6ickami cmd_demux (
		.clk                (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset              (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                     //   input,    width = 4,          .channel
		.sink_data          (limiter_pipeline_source0_data),                        //   input,  width = 119,          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                       //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                  //  output,  width = 119,          .data
		.src0_channel       (cmd_demux_src0_channel),                               //  output,    width = 4,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                           //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                 //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                 //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                  //  output,  width = 119,          .data
		.src1_channel       (cmd_demux_src1_channel),                               //  output,    width = 4,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                           //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                 //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                 //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                                  //  output,  width = 119,          .data
		.src2_channel       (cmd_demux_src2_channel),                               //  output,    width = 4,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                           //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                 //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                 //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_src3_data),                                  //  output,  width = 119,          .data
		.src3_channel       (cmd_demux_src3_channel),                               //  output,    width = 4,          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_181_6ickami cmd_demux_001 (
		.clk                (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset              (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),                 //   input,    width = 4,          .channel
		.sink_data          (limiter_pipeline_002_source0_data),                    //   input,  width = 119,          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                             //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                             //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                              //  output,  width = 119,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                           //  output,    width = 4,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                       //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                             //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                             //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),                              //  output,  width = 119,          .data
		.src1_channel       (cmd_demux_001_src1_channel),                           //  output,    width = 4,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                       //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                             //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                             //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_001_src2_data),                              //  output,  width = 119,          .data
		.src2_channel       (cmd_demux_001_src2_channel),                           //  output,    width = 4,          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                       //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                             //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                             //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_001_src3_data),                              //  output,  width = 119,          .data
		.src3_channel       (cmd_demux_001_src3_channel),                           //  output,    width = 4,          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_181_p5awupq cmd_mux (
		.clk                 (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset               (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                      //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                      //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                       //  output,  width = 119,          .data
		.src_channel         (cmd_mux_src_channel),                    //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),             //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),             //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),           //   input,    width = 4,          .channel
		.sink0_data          (mux_pipeline_source0_data),              //   input,  width = 119,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),       //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),       //   input,    width = 4,          .channel
		.sink1_data          (mux_pipeline_001_source0_data),          //   input,  width = 119,          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_181_p5awupq cmd_mux_001 (
		.clk                 (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset               (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                   //  output,  width = 119,          .data
		.src_channel         (cmd_mux_001_src_channel),                //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),       //   input,    width = 4,          .channel
		.sink0_data          (mux_pipeline_002_source0_data),          //   input,  width = 119,          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_003_source0_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_003_source0_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_003_source0_channel),       //   input,    width = 4,          .channel
		.sink1_data          (mux_pipeline_003_source0_data),          //   input,  width = 119,          .data
		.sink1_startofpacket (mux_pipeline_003_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_003_source0_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_181_p5awupq cmd_mux_002 (
		.clk                 (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset               (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                   //  output,  width = 119,          .data
		.src_channel         (cmd_mux_002_src_channel),                //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),       //   input,    width = 4,          .channel
		.sink0_data          (mux_pipeline_004_source0_data),          //   input,  width = 119,          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_005_source0_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_005_source0_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_005_source0_channel),       //   input,    width = 4,          .channel
		.sink1_data          (mux_pipeline_005_source0_data),          //   input,  width = 119,          .data
		.sink1_startofpacket (mux_pipeline_005_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_005_source0_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_181_p5awupq cmd_mux_003 (
		.clk                 (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset               (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                   //  output,  width = 119,          .data
		.src_channel         (cmd_mux_003_src_channel),                //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),       //   input,    width = 4,          .channel
		.sink0_data          (mux_pipeline_006_source0_data),          //   input,  width = 119,          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_007_source0_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_007_source0_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_007_source0_channel),       //   input,    width = 4,          .channel
		.sink1_data          (mux_pipeline_007_source0_data),          //   input,  width = 119,          .data
		.sink1_startofpacket (mux_pipeline_007_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_007_source0_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_181_4pxdtuy rsp_demux (
		.clk                (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset              (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                 //   input,    width = 4,          .channel
		.sink_data          (router_002_src_data),                    //   input,  width = 119,          .data
		.sink_startofpacket (router_002_src_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                   //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                   //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                    //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_src0_channel),                 //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),             //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                   //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                   //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                    //  output,  width = 119,          .data
		.src1_channel       (rsp_demux_src1_channel),                 //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),           //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)              //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_181_4pxdtuy rsp_demux_001 (
		.clk                (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset              (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                 //   input,    width = 4,          .channel
		.sink_data          (router_003_src_data),                    //   input,  width = 119,          .data
		.sink_startofpacket (router_003_src_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_001_src0_channel),             //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),         //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),               //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),               //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                //  output,  width = 119,          .data
		.src1_channel       (rsp_demux_001_src1_channel),             //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),       //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)          //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_181_4pxdtuy rsp_demux_002 (
		.clk                (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset              (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                 //   input,    width = 4,          .channel
		.sink_data          (router_004_src_data),                    //   input,  width = 119,          .data
		.sink_startofpacket (router_004_src_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_002_src0_channel),             //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),         //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),               //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),               //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                //  output,  width = 119,          .data
		.src1_channel       (rsp_demux_002_src1_channel),             //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),       //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)          //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_181_4pxdtuy rsp_demux_003 (
		.clk                (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset              (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                 //   input,    width = 4,          .channel
		.sink_data          (router_005_src_data),                    //   input,  width = 119,          .data
		.sink_startofpacket (router_005_src_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_003_src0_channel),             //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),         //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),               //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),               //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_003_src1_data),                //  output,  width = 119,          .data
		.src1_channel       (rsp_demux_003_src1_channel),             //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),       //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)          //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_181_ps2obki rsp_mux (
		.clk                 (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                    //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                     //  output,  width = 119,          .data
		.src_channel         (rsp_mux_src_channel),                                  //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                       //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),                     //   input,    width = 4,          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                        //   input,  width = 119,          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_009_source0_ready),                       //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_009_source0_valid),                       //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_009_source0_channel),                     //   input,    width = 4,          .channel
		.sink1_data          (mux_pipeline_009_source0_data),                        //   input,  width = 119,          .data
		.sink1_startofpacket (mux_pipeline_009_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_009_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_010_source0_ready),                       //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_010_source0_valid),                       //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_010_source0_channel),                     //   input,    width = 4,          .channel
		.sink2_data          (mux_pipeline_010_source0_data),                        //   input,  width = 119,          .data
		.sink2_startofpacket (mux_pipeline_010_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_010_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink3_ready         (mux_pipeline_011_source0_ready),                       //  output,    width = 1,     sink3.ready
		.sink3_valid         (mux_pipeline_011_source0_valid),                       //   input,    width = 1,          .valid
		.sink3_channel       (mux_pipeline_011_source0_channel),                     //   input,    width = 4,          .channel
		.sink3_data          (mux_pipeline_011_source0_data),                        //   input,  width = 119,          .data
		.sink3_startofpacket (mux_pipeline_011_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (mux_pipeline_011_source0_endofpacket)                  //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_181_ps2obki rsp_mux_001 (
		.clk                 (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                 //  output,  width = 119,          .data
		.src_channel         (rsp_mux_001_src_channel),                              //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_012_source0_ready),                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_012_source0_valid),                       //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_012_source0_channel),                     //   input,    width = 4,          .channel
		.sink0_data          (mux_pipeline_012_source0_data),                        //   input,  width = 119,          .data
		.sink0_startofpacket (mux_pipeline_012_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_012_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_013_source0_ready),                       //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_013_source0_valid),                       //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_013_source0_channel),                     //   input,    width = 4,          .channel
		.sink1_data          (mux_pipeline_013_source0_data),                        //   input,  width = 119,          .data
		.sink1_startofpacket (mux_pipeline_013_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_013_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_014_source0_ready),                       //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_014_source0_valid),                       //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_014_source0_channel),                     //   input,    width = 4,          .channel
		.sink2_data          (mux_pipeline_014_source0_data),                        //   input,  width = 119,          .data
		.sink2_startofpacket (mux_pipeline_014_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_014_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink3_ready         (mux_pipeline_015_source0_ready),                       //  output,    width = 1,     sink3.ready
		.sink3_valid         (mux_pipeline_015_source0_valid),                       //   input,    width = 1,          .valid
		.sink3_channel       (mux_pipeline_015_source0_channel),                     //   input,    width = 4,          .channel
		.sink3_data          (mux_pipeline_015_source0_data),                        //   input,  width = 119,          .data
		.sink3_startofpacket (mux_pipeline_015_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (mux_pipeline_015_source0_endofpacket)                  //   input,    width = 1,          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline (
		.clk               (clock_bridge_0_out_clk_clk),                                 //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),          //   input,  width = 119,          .data
		.in_channel        (a10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),       //   input,    width = 4,          .channel
		.out_ready         (limiter_pipeline_source0_ready),                             //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                             //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                       //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                              //  output,  width = 119,          .data
		.out_channel       (limiter_pipeline_source0_channel),                           //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_error          (1'b0)                                                        // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline_001 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                    //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                    //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_src_data),                                     //   input,  width = 119,          .data
		.in_channel        (rsp_mux_src_channel),                                  //   input,    width = 4,          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                   //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                   //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),           //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),             //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                    //  output,  width = 119,          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                 //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline_002 (
		.clk               (clock_bridge_0_out_clk_clk),                                 //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),          //   input,  width = 119,          .data
		.in_channel        (a10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),       //   input,    width = 4,          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                          //  output,  width = 119,          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                       //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_error          (1'b0)                                                        // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline_003 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                                //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                                //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                 //   input,  width = 119,          .data
		.in_channel        (rsp_mux_001_src_channel),                              //   input,    width = 4,          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                   //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                   //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),           //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),             //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                    //  output,  width = 119,          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                 //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline (
		.clk               (clock_bridge_0_out_clk_clk),                  //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, cr0_reset.reset
		.in_ready          (num1_s1_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (num1_s1_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (num1_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (num1_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (num1_s1_burst_adapter_source0_data),          //   input,  width = 119,          .data
		.in_channel        (num1_s1_burst_adapter_source0_channel),       //   input,    width = 4,          .channel
		.out_ready         (agent_pipeline_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                 //  output,  width = 119,          .data
		.out_channel       (agent_pipeline_source0_channel),              //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                        // (terminated),                         
		.out_empty         (),                                            // (terminated),                         
		.out_error         (),                                            // (terminated),                         
		.in_error          (1'b0)                                         // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_001 (
		.clk               (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, cr0_reset.reset
		.in_ready          (num1_s1_agent_rp_ready),                   //  output,    width = 1,     sink0.ready
		.in_valid          (num1_s1_agent_rp_valid),                   //   input,    width = 1,          .valid
		.in_startofpacket  (num1_s1_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (num1_s1_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.in_data           (num1_s1_agent_rp_data),                    //   input,  width = 119,          .data
		.out_ready         (agent_pipeline_001_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),          //  output,  width = 119,          .data
		.in_empty          (1'b0),                                     // (terminated),                         
		.out_empty         (),                                         // (terminated),                         
		.out_error         (),                                         // (terminated),                         
		.in_error          (1'b0),                                     // (terminated),                         
		.out_channel       (),                                         // (terminated),                         
		.in_channel        (1'b0)                                      // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_002 (
		.clk               (clock_bridge_0_out_clk_clk),                  //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, cr0_reset.reset
		.in_ready          (num2_s1_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (num2_s1_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (num2_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (num2_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (num2_s1_burst_adapter_source0_data),          //   input,  width = 119,          .data
		.in_channel        (num2_s1_burst_adapter_source0_channel),       //   input,    width = 4,          .channel
		.out_ready         (agent_pipeline_002_source0_ready),            //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),            //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),    //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),      //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),             //  output,  width = 119,          .data
		.out_channel       (agent_pipeline_002_source0_channel),          //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                        // (terminated),                         
		.out_empty         (),                                            // (terminated),                         
		.out_error         (),                                            // (terminated),                         
		.in_error          (1'b0)                                         // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_003 (
		.clk               (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, cr0_reset.reset
		.in_ready          (num2_s1_agent_rp_ready),                   //  output,    width = 1,     sink0.ready
		.in_valid          (num2_s1_agent_rp_valid),                   //   input,    width = 1,          .valid
		.in_startofpacket  (num2_s1_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (num2_s1_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.in_data           (num2_s1_agent_rp_data),                    //   input,  width = 119,          .data
		.out_ready         (agent_pipeline_003_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),          //  output,  width = 119,          .data
		.in_empty          (1'b0),                                     // (terminated),                         
		.out_empty         (),                                         // (terminated),                         
		.out_error         (),                                         // (terminated),                         
		.in_error          (1'b0),                                     // (terminated),                         
		.out_channel       (),                                         // (terminated),                         
		.in_channel        (1'b0)                                      // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_004 (
		.clk               (clock_bridge_0_out_clk_clk),                    //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, cr0_reset.reset
		.in_ready          (result_s1_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (result_s1_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (result_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (result_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (result_s1_burst_adapter_source0_data),          //   input,  width = 119,          .data
		.in_channel        (result_s1_burst_adapter_source0_channel),       //   input,    width = 4,          .channel
		.out_ready         (agent_pipeline_004_source0_ready),              //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),              //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),        //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),               //  output,  width = 119,          .data
		.out_channel       (agent_pipeline_004_source0_channel),            //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_005 (
		.clk               (clock_bridge_0_out_clk_clk),               //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, cr0_reset.reset
		.in_ready          (result_s1_agent_rp_ready),                 //  output,    width = 1,     sink0.ready
		.in_valid          (result_s1_agent_rp_valid),                 //   input,    width = 1,          .valid
		.in_startofpacket  (result_s1_agent_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (result_s1_agent_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.in_data           (result_s1_agent_rp_data),                  //   input,  width = 119,          .data
		.out_ready         (agent_pipeline_005_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),          //  output,  width = 119,          .data
		.in_empty          (1'b0),                                     // (terminated),                         
		.out_empty         (),                                         // (terminated),                         
		.out_error         (),                                         // (terminated),                         
		.in_error          (1'b0),                                     // (terminated),                         
		.out_channel       (),                                         // (terminated),                         
		.in_channel        (1'b0)                                      // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_006 (
		.clk               (clock_bridge_0_out_clk_clk),                              //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, cr0_reset.reset
		.in_ready          (onchip_memory2_0_s1_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (onchip_memory2_0_s1_burst_adapter_source0_data),          //   input,  width = 119,          .data
		.in_channel        (onchip_memory2_0_s1_burst_adapter_source0_channel),       //   input,    width = 4,          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                        //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                        //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                         //  output,  width = 119,          .data
		.out_channel       (agent_pipeline_006_source0_channel),                      //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                    // (terminated),                         
		.out_empty         (),                                                        // (terminated),                         
		.out_error         (),                                                        // (terminated),                         
		.in_error          (1'b0)                                                     // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_007 (
		.clk               (clock_bridge_0_out_clk_clk),                 //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.in_ready          (onchip_memory2_0_s1_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (onchip_memory2_0_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (onchip_memory2_0_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (onchip_memory2_0_s1_agent_rp_data),          //   input,  width = 119,          .data
		.out_ready         (agent_pipeline_007_source0_ready),           //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),           //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),     //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),            //  output,  width = 119,          .data
		.in_empty          (1'b0),                                       // (terminated),                         
		.out_empty         (),                                           // (terminated),                         
		.out_error         (),                                           // (terminated),                         
		.in_error          (1'b0),                                       // (terminated),                         
		.out_channel       (),                                           // (terminated),                         
		.in_channel        (1'b0)                                        // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src0_data),                    //   input,  width = 119,          .data
		.in_channel        (cmd_demux_src0_channel),                 //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_source0_ready),             //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),             //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),       //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),              //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_source0_channel),           //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                   // (terminated),                         
		.out_empty         (),                                       // (terminated),                         
		.out_error         (),                                       // (terminated),                         
		.in_error          (1'b0)                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_001 (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),               //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),               //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),         //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                //   input,  width = 119,          .data
		.in_channel        (cmd_demux_001_src0_channel),             //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),          //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_001_source0_channel),       //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                   // (terminated),                         
		.out_empty         (),                                       // (terminated),                         
		.out_error         (),                                       // (terminated),                         
		.in_error          (1'b0)                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_002 (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src1_data),                    //   input,  width = 119,          .data
		.in_channel        (cmd_demux_src1_channel),                 //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_002_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),          //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_002_source0_channel),       //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                   // (terminated),                         
		.out_empty         (),                                       // (terminated),                         
		.out_error         (),                                       // (terminated),                         
		.in_error          (1'b0)                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_003 (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),               //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),               //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),         //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                //   input,  width = 119,          .data
		.in_channel        (cmd_demux_001_src1_channel),             //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_003_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),          //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_003_source0_channel),       //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                   // (terminated),                         
		.out_empty         (),                                       // (terminated),                         
		.out_error         (),                                       // (terminated),                         
		.in_error          (1'b0)                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_004 (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src2_data),                    //   input,  width = 119,          .data
		.in_channel        (cmd_demux_src2_channel),                 //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_004_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),          //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_004_source0_channel),       //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                   // (terminated),                         
		.out_empty         (),                                       // (terminated),                         
		.out_error         (),                                       // (terminated),                         
		.in_error          (1'b0)                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_005 (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),               //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),               //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),         //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                //   input,  width = 119,          .data
		.in_channel        (cmd_demux_001_src2_channel),             //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_005_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),          //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_005_source0_channel),       //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                   // (terminated),                         
		.out_empty         (),                                       // (terminated),                         
		.out_error         (),                                       // (terminated),                         
		.in_error          (1'b0)                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_006 (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src3_data),                    //   input,  width = 119,          .data
		.in_channel        (cmd_demux_src3_channel),                 //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_006_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),          //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_006_source0_channel),       //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                   // (terminated),                         
		.out_empty         (),                                       // (terminated),                         
		.out_error         (),                                       // (terminated),                         
		.in_error          (1'b0)                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_007 (
		.clk               (clock_bridge_0_out_clk_clk),             //   input,    width = 1,       cr0.clk
		.reset             (num1_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),               //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),               //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),         //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                //   input,  width = 119,          .data
		.in_channel        (cmd_demux_001_src3_channel),             //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_007_source0_ready),         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),          //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_007_source0_channel),       //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                   // (terminated),                         
		.out_empty         (),                                       // (terminated),                         
		.out_error         (),                                       // (terminated),                         
		.in_error          (1'b0)                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_008 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                 //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                 //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                           //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src0_data),                                  //   input,  width = 119,          .data
		.in_channel        (rsp_demux_src0_channel),                               //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                        //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_008_source0_channel),                     //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_009 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                             //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                             //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                       //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                              //   input,  width = 119,          .data
		.in_channel        (rsp_demux_001_src0_channel),                           //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                        //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_009_source0_channel),                     //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_010 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                             //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                             //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                       //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                              //   input,  width = 119,          .data
		.in_channel        (rsp_demux_002_src0_channel),                           //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                        //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_010_source0_channel),                     //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_011 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                             //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                             //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                       //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                              //   input,  width = 119,          .data
		.in_channel        (rsp_demux_003_src0_channel),                           //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                        //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_011_source0_channel),                     //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_012 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                 //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                                 //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                           //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src1_data),                                  //   input,  width = 119,          .data
		.in_channel        (rsp_demux_src1_channel),                               //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                        //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_012_source0_channel),                     //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_013 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                             //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_001_src1_valid),                             //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                       //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_001_src1_data),                              //   input,  width = 119,          .data
		.in_channel        (rsp_demux_001_src1_channel),                           //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                        //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_013_source0_channel),                     //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_014 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                             //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_002_src1_valid),                             //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                       //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_002_src1_data),                              //   input,  width = 119,          .data
		.in_channel        (rsp_demux_002_src1_channel),                           //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                        //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_014_source0_channel),                     //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (119),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_015 (
		.clk               (clock_bridge_0_out_clk_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                             //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_003_src1_valid),                             //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                       //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_003_src1_data),                              //   input,  width = 119,          .data
		.in_channel        (rsp_demux_003_src1_channel),                           //   input,    width = 4,          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                        //  output,  width = 119,          .data
		.out_channel       (mux_pipeline_015_source0_channel),                     //  output,    width = 4,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

endmodule
