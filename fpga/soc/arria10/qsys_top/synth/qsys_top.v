// qsys_top.v

// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module qsys_top (
		input  wire        f2h_cold_reset_req_reset_n,                 //                    f2h_cold_reset_req.reset_n
		input  wire        f2h_debug_reset_req_reset_n,                //                   f2h_debug_reset_req.reset_n
		input  wire        f2h_warm_reset_req_reset_n,                 //                    f2h_warm_reset_req.reset_n
		output wire        hps_io_hps_io_phery_emac0_TX_CLK,           //                                hps_io.hps_io_phery_emac0_TX_CLK
		output wire        hps_io_hps_io_phery_emac0_TXD0,             //                                      .hps_io_phery_emac0_TXD0
		output wire        hps_io_hps_io_phery_emac0_TXD1,             //                                      .hps_io_phery_emac0_TXD1
		output wire        hps_io_hps_io_phery_emac0_TXD2,             //                                      .hps_io_phery_emac0_TXD2
		output wire        hps_io_hps_io_phery_emac0_TXD3,             //                                      .hps_io_phery_emac0_TXD3
		input  wire        hps_io_hps_io_phery_emac0_RX_CTL,           //                                      .hps_io_phery_emac0_RX_CTL
		output wire        hps_io_hps_io_phery_emac0_TX_CTL,           //                                      .hps_io_phery_emac0_TX_CTL
		input  wire        hps_io_hps_io_phery_emac0_RX_CLK,           //                                      .hps_io_phery_emac0_RX_CLK
		input  wire        hps_io_hps_io_phery_emac0_RXD0,             //                                      .hps_io_phery_emac0_RXD0
		input  wire        hps_io_hps_io_phery_emac0_RXD1,             //                                      .hps_io_phery_emac0_RXD1
		input  wire        hps_io_hps_io_phery_emac0_RXD2,             //                                      .hps_io_phery_emac0_RXD2
		input  wire        hps_io_hps_io_phery_emac0_RXD3,             //                                      .hps_io_phery_emac0_RXD3
		inout  wire        hps_io_hps_io_phery_emac0_MDIO,             //                                      .hps_io_phery_emac0_MDIO
		output wire        hps_io_hps_io_phery_emac0_MDC,              //                                      .hps_io_phery_emac0_MDC
		inout  wire        hps_io_hps_io_phery_sdmmc_CMD,              //                                      .hps_io_phery_sdmmc_CMD
		inout  wire        hps_io_hps_io_phery_sdmmc_D0,               //                                      .hps_io_phery_sdmmc_D0
		inout  wire        hps_io_hps_io_phery_sdmmc_D1,               //                                      .hps_io_phery_sdmmc_D1
		inout  wire        hps_io_hps_io_phery_sdmmc_D2,               //                                      .hps_io_phery_sdmmc_D2
		inout  wire        hps_io_hps_io_phery_sdmmc_D3,               //                                      .hps_io_phery_sdmmc_D3
		inout  wire        hps_io_hps_io_phery_sdmmc_D4,               //                                      .hps_io_phery_sdmmc_D4
		inout  wire        hps_io_hps_io_phery_sdmmc_D5,               //                                      .hps_io_phery_sdmmc_D5
		inout  wire        hps_io_hps_io_phery_sdmmc_D6,               //                                      .hps_io_phery_sdmmc_D6
		inout  wire        hps_io_hps_io_phery_sdmmc_D7,               //                                      .hps_io_phery_sdmmc_D7
		output wire        hps_io_hps_io_phery_sdmmc_CCLK,             //                                      .hps_io_phery_sdmmc_CCLK
		inout  wire        hps_io_hps_io_phery_usb0_DATA0,             //                                      .hps_io_phery_usb0_DATA0
		inout  wire        hps_io_hps_io_phery_usb0_DATA1,             //                                      .hps_io_phery_usb0_DATA1
		inout  wire        hps_io_hps_io_phery_usb0_DATA2,             //                                      .hps_io_phery_usb0_DATA2
		inout  wire        hps_io_hps_io_phery_usb0_DATA3,             //                                      .hps_io_phery_usb0_DATA3
		inout  wire        hps_io_hps_io_phery_usb0_DATA4,             //                                      .hps_io_phery_usb0_DATA4
		inout  wire        hps_io_hps_io_phery_usb0_DATA5,             //                                      .hps_io_phery_usb0_DATA5
		inout  wire        hps_io_hps_io_phery_usb0_DATA6,             //                                      .hps_io_phery_usb0_DATA6
		inout  wire        hps_io_hps_io_phery_usb0_DATA7,             //                                      .hps_io_phery_usb0_DATA7
		input  wire        hps_io_hps_io_phery_usb0_CLK,               //                                      .hps_io_phery_usb0_CLK
		output wire        hps_io_hps_io_phery_usb0_STP,               //                                      .hps_io_phery_usb0_STP
		input  wire        hps_io_hps_io_phery_usb0_DIR,               //                                      .hps_io_phery_usb0_DIR
		input  wire        hps_io_hps_io_phery_usb0_NXT,               //                                      .hps_io_phery_usb0_NXT
		output wire        hps_io_hps_io_phery_spim1_CLK,              //                                      .hps_io_phery_spim1_CLK
		output wire        hps_io_hps_io_phery_spim1_MOSI,             //                                      .hps_io_phery_spim1_MOSI
		input  wire        hps_io_hps_io_phery_spim1_MISO,             //                                      .hps_io_phery_spim1_MISO
		output wire        hps_io_hps_io_phery_spim1_SS0_N,            //                                      .hps_io_phery_spim1_SS0_N
		output wire        hps_io_hps_io_phery_spim1_SS1_N,            //                                      .hps_io_phery_spim1_SS1_N
		output wire        hps_io_hps_io_phery_trace_CLK,              //                                      .hps_io_phery_trace_CLK
		output wire        hps_io_hps_io_phery_trace_D0,               //                                      .hps_io_phery_trace_D0
		output wire        hps_io_hps_io_phery_trace_D1,               //                                      .hps_io_phery_trace_D1
		output wire        hps_io_hps_io_phery_trace_D2,               //                                      .hps_io_phery_trace_D2
		output wire        hps_io_hps_io_phery_trace_D3,               //                                      .hps_io_phery_trace_D3
		input  wire        hps_io_hps_io_phery_uart1_RX,               //                                      .hps_io_phery_uart1_RX
		output wire        hps_io_hps_io_phery_uart1_TX,               //                                      .hps_io_phery_uart1_TX
		inout  wire        hps_io_hps_io_phery_i2c1_SDA,               //                                      .hps_io_phery_i2c1_SDA
		inout  wire        hps_io_hps_io_phery_i2c1_SCL,               //                                      .hps_io_phery_i2c1_SCL
		inout  wire        hps_io_hps_io_gpio_gpio1_io5,               //                                      .hps_io_gpio_gpio1_io5
		inout  wire        hps_io_hps_io_gpio_gpio1_io14,              //                                      .hps_io_gpio_gpio1_io14
		inout  wire        hps_io_hps_io_gpio_gpio1_io16,              //                                      .hps_io_gpio_gpio1_io16
		inout  wire        hps_io_hps_io_gpio_gpio1_io17,              //                                      .hps_io_gpio_gpio1_io17
		input  wire        clk_clk,                                    //                                   clk.clk
		input  wire        emif_a10_hps_0_pll_ref_clk_clock_sink_clk,  // emif_a10_hps_0_pll_ref_clk_clock_sink.clk
		input  wire        emif_a10_hps_0_oct_conduit_end_oct_rzqin,   //        emif_a10_hps_0_oct_conduit_end.oct_rzqin
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_ck,      //        emif_a10_hps_0_mem_conduit_end.mem_ck
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_ck_n,    //                                      .mem_ck_n
		output wire [16:0] emif_a10_hps_0_mem_conduit_end_mem_a,       //                                      .mem_a
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_act_n,   //                                      .mem_act_n
		output wire [1:0]  emif_a10_hps_0_mem_conduit_end_mem_ba,      //                                      .mem_ba
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_bg,      //                                      .mem_bg
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_cke,     //                                      .mem_cke
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_cs_n,    //                                      .mem_cs_n
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_odt,     //                                      .mem_odt
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_reset_n, //                                      .mem_reset_n
		output wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_par,     //                                      .mem_par
		input  wire [0:0]  emif_a10_hps_0_mem_conduit_end_mem_alert_n, //                                      .mem_alert_n
		inout  wire [3:0]  emif_a10_hps_0_mem_conduit_end_mem_dqs,     //                                      .mem_dqs
		inout  wire [3:0]  emif_a10_hps_0_mem_conduit_end_mem_dqs_n,   //                                      .mem_dqs_n
		inout  wire [31:0] emif_a10_hps_0_mem_conduit_end_mem_dq,      //                                      .mem_dq
		inout  wire [3:0]  emif_a10_hps_0_mem_conduit_end_mem_dbi_n,   //                                      .mem_dbi_n
		output wire [31:0] num1_export,                                //                                  num1.export
		output wire [31:0] num2_export,                                //                                  num2.export
		input  wire [31:0] result_export,                              //                                result.export
		output wire        hps_fpga_reset_reset,                       //                        hps_fpga_reset.reset
		input  wire        reset_reset_n                               //                                 reset.reset_n
	);

	wire           clock_bridge_0_out_clk_clk;                // clock_bridge_0:out_clk -> [a10_hps:f2h_axi_clk, a10_hps:f2sdram0_clk, a10_hps:f2sdram2_clk, a10_hps:h2f_axi_clk, a10_hps:h2f_lw_axi_clk, mm_interconnect_0:clock_bridge_0_out_clk_clk, num1:clk, num2:clk, result:clk, rst_bdg:clk, rst_controller:clk, rst_in:clk]
	wire     [1:0] a10_hps_emif_gp_to_emif;                   // a10_hps:emif_gp_to_emif -> emif_hps:hps_to_emif_gp
	wire  [4095:0] emif_hps_hps_emif_conduit_end_emif_to_hps; // emif_hps:emif_to_hps -> a10_hps:emif_emif_to_hps
	wire     [0:0] emif_hps_hps_emif_conduit_end_emif_to_gp;  // emif_hps:emif_to_hps_gp -> a10_hps:emif_emif_to_gp
	wire  [4095:0] a10_hps_emif_hps_to_emif;                  // a10_hps:emif_hps_to_emif -> emif_hps:hps_to_emif
	wire           rst_in_out_reset_reset;                    // rst_in:out_reset_n -> [emif_hps:global_reset_n, mm_interconnect_0:num1_reset_reset_bridge_in_reset_reset, num1:reset_n, num2:reset_n, result:reset_n, rst_controller:reset_in1]
	wire     [1:0] a10_hps_h2f_lw_axi_master_awburst;         // a10_hps:h2f_lw_AWBURST -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awburst
	wire     [4:0] a10_hps_h2f_lw_axi_master_awuser;          // a10_hps:h2f_lw_AWUSER -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awuser
	wire     [3:0] a10_hps_h2f_lw_axi_master_arlen;           // a10_hps:h2f_lw_ARLEN -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_arlen
	wire     [3:0] a10_hps_h2f_lw_axi_master_wstrb;           // a10_hps:h2f_lw_WSTRB -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_wstrb
	wire           a10_hps_h2f_lw_axi_master_wready;          // mm_interconnect_0:a10_hps_h2f_lw_axi_master_wready -> a10_hps:h2f_lw_WREADY
	wire     [3:0] a10_hps_h2f_lw_axi_master_rid;             // mm_interconnect_0:a10_hps_h2f_lw_axi_master_rid -> a10_hps:h2f_lw_RID
	wire           a10_hps_h2f_lw_axi_master_rready;          // a10_hps:h2f_lw_RREADY -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_rready
	wire     [3:0] a10_hps_h2f_lw_axi_master_awlen;           // a10_hps:h2f_lw_AWLEN -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awlen
	wire     [3:0] a10_hps_h2f_lw_axi_master_wid;             // a10_hps:h2f_lw_WID -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_wid
	wire     [3:0] a10_hps_h2f_lw_axi_master_arcache;         // a10_hps:h2f_lw_ARCACHE -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_arcache
	wire           a10_hps_h2f_lw_axi_master_wvalid;          // a10_hps:h2f_lw_WVALID -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_wvalid
	wire    [20:0] a10_hps_h2f_lw_axi_master_araddr;          // a10_hps:h2f_lw_ARADDR -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_araddr
	wire     [2:0] a10_hps_h2f_lw_axi_master_arprot;          // a10_hps:h2f_lw_ARPROT -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_arprot
	wire     [2:0] a10_hps_h2f_lw_axi_master_awprot;          // a10_hps:h2f_lw_AWPROT -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awprot
	wire    [31:0] a10_hps_h2f_lw_axi_master_wdata;           // a10_hps:h2f_lw_WDATA -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_wdata
	wire           a10_hps_h2f_lw_axi_master_arvalid;         // a10_hps:h2f_lw_ARVALID -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_arvalid
	wire     [3:0] a10_hps_h2f_lw_axi_master_awcache;         // a10_hps:h2f_lw_AWCACHE -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awcache
	wire     [3:0] a10_hps_h2f_lw_axi_master_arid;            // a10_hps:h2f_lw_ARID -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_arid
	wire     [1:0] a10_hps_h2f_lw_axi_master_arlock;          // a10_hps:h2f_lw_ARLOCK -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_arlock
	wire     [1:0] a10_hps_h2f_lw_axi_master_awlock;          // a10_hps:h2f_lw_AWLOCK -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awlock
	wire    [20:0] a10_hps_h2f_lw_axi_master_awaddr;          // a10_hps:h2f_lw_AWADDR -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awaddr
	wire     [1:0] a10_hps_h2f_lw_axi_master_bresp;           // mm_interconnect_0:a10_hps_h2f_lw_axi_master_bresp -> a10_hps:h2f_lw_BRESP
	wire           a10_hps_h2f_lw_axi_master_arready;         // mm_interconnect_0:a10_hps_h2f_lw_axi_master_arready -> a10_hps:h2f_lw_ARREADY
	wire    [31:0] a10_hps_h2f_lw_axi_master_rdata;           // mm_interconnect_0:a10_hps_h2f_lw_axi_master_rdata -> a10_hps:h2f_lw_RDATA
	wire           a10_hps_h2f_lw_axi_master_awready;         // mm_interconnect_0:a10_hps_h2f_lw_axi_master_awready -> a10_hps:h2f_lw_AWREADY
	wire     [1:0] a10_hps_h2f_lw_axi_master_arburst;         // a10_hps:h2f_lw_ARBURST -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_arburst
	wire     [2:0] a10_hps_h2f_lw_axi_master_arsize;          // a10_hps:h2f_lw_ARSIZE -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_arsize
	wire           a10_hps_h2f_lw_axi_master_bready;          // a10_hps:h2f_lw_BREADY -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_bready
	wire           a10_hps_h2f_lw_axi_master_rlast;           // mm_interconnect_0:a10_hps_h2f_lw_axi_master_rlast -> a10_hps:h2f_lw_RLAST
	wire           a10_hps_h2f_lw_axi_master_wlast;           // a10_hps:h2f_lw_WLAST -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_wlast
	wire     [1:0] a10_hps_h2f_lw_axi_master_rresp;           // mm_interconnect_0:a10_hps_h2f_lw_axi_master_rresp -> a10_hps:h2f_lw_RRESP
	wire     [3:0] a10_hps_h2f_lw_axi_master_awid;            // a10_hps:h2f_lw_AWID -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awid
	wire     [3:0] a10_hps_h2f_lw_axi_master_bid;             // mm_interconnect_0:a10_hps_h2f_lw_axi_master_bid -> a10_hps:h2f_lw_BID
	wire           a10_hps_h2f_lw_axi_master_bvalid;          // mm_interconnect_0:a10_hps_h2f_lw_axi_master_bvalid -> a10_hps:h2f_lw_BVALID
	wire     [2:0] a10_hps_h2f_lw_axi_master_awsize;          // a10_hps:h2f_lw_AWSIZE -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awsize
	wire           a10_hps_h2f_lw_axi_master_awvalid;         // a10_hps:h2f_lw_AWVALID -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_awvalid
	wire     [4:0] a10_hps_h2f_lw_axi_master_aruser;          // a10_hps:h2f_lw_ARUSER -> mm_interconnect_0:a10_hps_h2f_lw_axi_master_aruser
	wire           a10_hps_h2f_lw_axi_master_rvalid;          // mm_interconnect_0:a10_hps_h2f_lw_axi_master_rvalid -> a10_hps:h2f_lw_RVALID
	wire           mm_interconnect_0_num1_s1_chipselect;      // mm_interconnect_0:num1_s1_chipselect -> num1:chipselect
	wire    [31:0] mm_interconnect_0_num1_s1_readdata;        // num1:readdata -> mm_interconnect_0:num1_s1_readdata
	wire     [1:0] mm_interconnect_0_num1_s1_address;         // mm_interconnect_0:num1_s1_address -> num1:address
	wire           mm_interconnect_0_num1_s1_write;           // mm_interconnect_0:num1_s1_write -> num1:write_n
	wire    [31:0] mm_interconnect_0_num1_s1_writedata;       // mm_interconnect_0:num1_s1_writedata -> num1:writedata
	wire           mm_interconnect_0_num2_s1_chipselect;      // mm_interconnect_0:num2_s1_chipselect -> num2:chipselect
	wire    [31:0] mm_interconnect_0_num2_s1_readdata;        // num2:readdata -> mm_interconnect_0:num2_s1_readdata
	wire     [1:0] mm_interconnect_0_num2_s1_address;         // mm_interconnect_0:num2_s1_address -> num2:address
	wire           mm_interconnect_0_num2_s1_write;           // mm_interconnect_0:num2_s1_write -> num2:write_n
	wire    [31:0] mm_interconnect_0_num2_s1_writedata;       // mm_interconnect_0:num2_s1_writedata -> num2:writedata
	wire    [31:0] mm_interconnect_0_result_s1_readdata;      // result:readdata -> mm_interconnect_0:result_s1_readdata
	wire     [1:0] mm_interconnect_0_result_s1_address;       // mm_interconnect_0:result_s1_address -> result:address
	wire           rst_controller_reset_out_reset;            // rst_controller:reset_out -> [a10_hps:f2h_axi_rst, a10_hps:f2s_sdram0_rst, a10_hps:f2s_sdram2_rst, a10_hps:h2f_axi_rst, a10_hps:h2f_lw_axi_rst, mm_interconnect_0:a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset, rst_bdg:in_reset]
	wire           a10_hps_h2f_reset_reset;                   // a10_hps:h2f_rst_n -> rst_controller:reset_in0

	qsys_top_altera_arria10_hps_181_gx7txaq #(
		.F2S_Width (6),
		.S2F_Width (4)
	) a10_hps (
		.h2f_rst_n                 (a10_hps_h2f_reset_reset),                   //  output,     width = 1,           h2f_reset.reset_n
		.f2h_cold_rst_req_n        (f2h_cold_reset_req_reset_n),                //   input,     width = 1,  f2h_cold_reset_req.reset_n
		.f2h_dbg_rst_req_n         (f2h_debug_reset_req_reset_n),               //   input,     width = 1, f2h_debug_reset_req.reset_n
		.f2h_warm_rst_req_n        (f2h_warm_reset_req_reset_n),                //   input,     width = 1,  f2h_warm_reset_req.reset_n
		.emif_emif_to_hps          (emif_hps_hps_emif_conduit_end_emif_to_hps), //   input,  width = 4096,                emif.emif_to_hps
		.emif_hps_to_emif          (a10_hps_emif_hps_to_emif),                  //  output,  width = 4096,                    .hps_to_emif
		.emif_emif_to_gp           (emif_hps_hps_emif_conduit_end_emif_to_gp),  //   input,     width = 1,                    .emif_to_gp
		.emif_gp_to_emif           (a10_hps_emif_gp_to_emif),                   //  output,     width = 2,                    .gp_to_emif
		.f2h_axi_clk               (clock_bridge_0_out_clk_clk),                //   input,     width = 1,       f2h_axi_clock.clk
		.f2h_axi_rst               (~rst_controller_reset_out_reset),           //   input,     width = 1,       f2h_axi_reset.reset_n
		.f2h_AWID                  (),                                          //   input,     width = 4,       f2h_axi_slave.awid
		.f2h_AWADDR                (),                                          //   input,    width = 32,                    .awaddr
		.f2h_AWLEN                 (),                                          //   input,     width = 4,                    .awlen
		.f2h_AWSIZE                (),                                          //   input,     width = 3,                    .awsize
		.f2h_AWBURST               (),                                          //   input,     width = 2,                    .awburst
		.f2h_AWLOCK                (),                                          //   input,     width = 2,                    .awlock
		.f2h_AWCACHE               (),                                          //   input,     width = 4,                    .awcache
		.f2h_AWPROT                (),                                          //   input,     width = 3,                    .awprot
		.f2h_AWVALID               (),                                          //   input,     width = 1,                    .awvalid
		.f2h_AWREADY               (),                                          //  output,     width = 1,                    .awready
		.f2h_AWUSER                (),                                          //   input,     width = 5,                    .awuser
		.f2h_WID                   (),                                          //   input,     width = 4,                    .wid
		.f2h_WDATA                 (),                                          //   input,   width = 128,                    .wdata
		.f2h_WSTRB                 (),                                          //   input,    width = 16,                    .wstrb
		.f2h_WLAST                 (),                                          //   input,     width = 1,                    .wlast
		.f2h_WVALID                (),                                          //   input,     width = 1,                    .wvalid
		.f2h_WREADY                (),                                          //  output,     width = 1,                    .wready
		.f2h_BID                   (),                                          //  output,     width = 4,                    .bid
		.f2h_BRESP                 (),                                          //  output,     width = 2,                    .bresp
		.f2h_BVALID                (),                                          //  output,     width = 1,                    .bvalid
		.f2h_BREADY                (),                                          //   input,     width = 1,                    .bready
		.f2h_ARID                  (),                                          //   input,     width = 4,                    .arid
		.f2h_ARADDR                (),                                          //   input,    width = 32,                    .araddr
		.f2h_ARLEN                 (),                                          //   input,     width = 4,                    .arlen
		.f2h_ARSIZE                (),                                          //   input,     width = 3,                    .arsize
		.f2h_ARBURST               (),                                          //   input,     width = 2,                    .arburst
		.f2h_ARLOCK                (),                                          //   input,     width = 2,                    .arlock
		.f2h_ARCACHE               (),                                          //   input,     width = 4,                    .arcache
		.f2h_ARPROT                (),                                          //   input,     width = 3,                    .arprot
		.f2h_ARVALID               (),                                          //   input,     width = 1,                    .arvalid
		.f2h_ARREADY               (),                                          //  output,     width = 1,                    .arready
		.f2h_ARUSER                (),                                          //   input,     width = 5,                    .aruser
		.f2h_RID                   (),                                          //  output,     width = 4,                    .rid
		.f2h_RDATA                 (),                                          //  output,   width = 128,                    .rdata
		.f2h_RRESP                 (),                                          //  output,     width = 2,                    .rresp
		.f2h_RLAST                 (),                                          //  output,     width = 1,                    .rlast
		.f2h_RVALID                (),                                          //  output,     width = 1,                    .rvalid
		.f2h_RREADY                (),                                          //   input,     width = 1,                    .rready
		.h2f_lw_axi_clk            (clock_bridge_0_out_clk_clk),                //   input,     width = 1,    h2f_lw_axi_clock.clk
		.h2f_lw_axi_rst            (~rst_controller_reset_out_reset),           //   input,     width = 1,    h2f_lw_axi_reset.reset_n
		.h2f_lw_AWID               (a10_hps_h2f_lw_axi_master_awid),            //  output,     width = 4,   h2f_lw_axi_master.awid
		.h2f_lw_AWADDR             (a10_hps_h2f_lw_axi_master_awaddr),          //  output,    width = 21,                    .awaddr
		.h2f_lw_AWLEN              (a10_hps_h2f_lw_axi_master_awlen),           //  output,     width = 4,                    .awlen
		.h2f_lw_AWSIZE             (a10_hps_h2f_lw_axi_master_awsize),          //  output,     width = 3,                    .awsize
		.h2f_lw_AWBURST            (a10_hps_h2f_lw_axi_master_awburst),         //  output,     width = 2,                    .awburst
		.h2f_lw_AWLOCK             (a10_hps_h2f_lw_axi_master_awlock),          //  output,     width = 2,                    .awlock
		.h2f_lw_AWCACHE            (a10_hps_h2f_lw_axi_master_awcache),         //  output,     width = 4,                    .awcache
		.h2f_lw_AWPROT             (a10_hps_h2f_lw_axi_master_awprot),          //  output,     width = 3,                    .awprot
		.h2f_lw_AWVALID            (a10_hps_h2f_lw_axi_master_awvalid),         //  output,     width = 1,                    .awvalid
		.h2f_lw_AWREADY            (a10_hps_h2f_lw_axi_master_awready),         //   input,     width = 1,                    .awready
		.h2f_lw_AWUSER             (a10_hps_h2f_lw_axi_master_awuser),          //  output,     width = 5,                    .awuser
		.h2f_lw_WID                (a10_hps_h2f_lw_axi_master_wid),             //  output,     width = 4,                    .wid
		.h2f_lw_WDATA              (a10_hps_h2f_lw_axi_master_wdata),           //  output,    width = 32,                    .wdata
		.h2f_lw_WSTRB              (a10_hps_h2f_lw_axi_master_wstrb),           //  output,     width = 4,                    .wstrb
		.h2f_lw_WLAST              (a10_hps_h2f_lw_axi_master_wlast),           //  output,     width = 1,                    .wlast
		.h2f_lw_WVALID             (a10_hps_h2f_lw_axi_master_wvalid),          //  output,     width = 1,                    .wvalid
		.h2f_lw_WREADY             (a10_hps_h2f_lw_axi_master_wready),          //   input,     width = 1,                    .wready
		.h2f_lw_BID                (a10_hps_h2f_lw_axi_master_bid),             //   input,     width = 4,                    .bid
		.h2f_lw_BRESP              (a10_hps_h2f_lw_axi_master_bresp),           //   input,     width = 2,                    .bresp
		.h2f_lw_BVALID             (a10_hps_h2f_lw_axi_master_bvalid),          //   input,     width = 1,                    .bvalid
		.h2f_lw_BREADY             (a10_hps_h2f_lw_axi_master_bready),          //  output,     width = 1,                    .bready
		.h2f_lw_ARID               (a10_hps_h2f_lw_axi_master_arid),            //  output,     width = 4,                    .arid
		.h2f_lw_ARADDR             (a10_hps_h2f_lw_axi_master_araddr),          //  output,    width = 21,                    .araddr
		.h2f_lw_ARLEN              (a10_hps_h2f_lw_axi_master_arlen),           //  output,     width = 4,                    .arlen
		.h2f_lw_ARSIZE             (a10_hps_h2f_lw_axi_master_arsize),          //  output,     width = 3,                    .arsize
		.h2f_lw_ARBURST            (a10_hps_h2f_lw_axi_master_arburst),         //  output,     width = 2,                    .arburst
		.h2f_lw_ARLOCK             (a10_hps_h2f_lw_axi_master_arlock),          //  output,     width = 2,                    .arlock
		.h2f_lw_ARCACHE            (a10_hps_h2f_lw_axi_master_arcache),         //  output,     width = 4,                    .arcache
		.h2f_lw_ARPROT             (a10_hps_h2f_lw_axi_master_arprot),          //  output,     width = 3,                    .arprot
		.h2f_lw_ARVALID            (a10_hps_h2f_lw_axi_master_arvalid),         //  output,     width = 1,                    .arvalid
		.h2f_lw_ARREADY            (a10_hps_h2f_lw_axi_master_arready),         //   input,     width = 1,                    .arready
		.h2f_lw_ARUSER             (a10_hps_h2f_lw_axi_master_aruser),          //  output,     width = 5,                    .aruser
		.h2f_lw_RID                (a10_hps_h2f_lw_axi_master_rid),             //   input,     width = 4,                    .rid
		.h2f_lw_RDATA              (a10_hps_h2f_lw_axi_master_rdata),           //   input,    width = 32,                    .rdata
		.h2f_lw_RRESP              (a10_hps_h2f_lw_axi_master_rresp),           //   input,     width = 2,                    .rresp
		.h2f_lw_RLAST              (a10_hps_h2f_lw_axi_master_rlast),           //   input,     width = 1,                    .rlast
		.h2f_lw_RVALID             (a10_hps_h2f_lw_axi_master_rvalid),          //   input,     width = 1,                    .rvalid
		.h2f_lw_RREADY             (a10_hps_h2f_lw_axi_master_rready),          //  output,     width = 1,                    .rready
		.h2f_axi_clk               (clock_bridge_0_out_clk_clk),                //   input,     width = 1,       h2f_axi_clock.clk
		.h2f_axi_rst               (~rst_controller_reset_out_reset),           //   input,     width = 1,       h2f_axi_reset.reset_n
		.h2f_AWID                  (),                                          //  output,     width = 4,      h2f_axi_master.awid
		.h2f_AWADDR                (),                                          //  output,    width = 32,                    .awaddr
		.h2f_AWLEN                 (),                                          //  output,     width = 4,                    .awlen
		.h2f_AWSIZE                (),                                          //  output,     width = 3,                    .awsize
		.h2f_AWBURST               (),                                          //  output,     width = 2,                    .awburst
		.h2f_AWLOCK                (),                                          //  output,     width = 2,                    .awlock
		.h2f_AWCACHE               (),                                          //  output,     width = 4,                    .awcache
		.h2f_AWPROT                (),                                          //  output,     width = 3,                    .awprot
		.h2f_AWVALID               (),                                          //  output,     width = 1,                    .awvalid
		.h2f_AWREADY               (),                                          //   input,     width = 1,                    .awready
		.h2f_AWUSER                (),                                          //  output,     width = 5,                    .awuser
		.h2f_WID                   (),                                          //  output,     width = 4,                    .wid
		.h2f_WDATA                 (),                                          //  output,    width = 32,                    .wdata
		.h2f_WSTRB                 (),                                          //  output,     width = 4,                    .wstrb
		.h2f_WLAST                 (),                                          //  output,     width = 1,                    .wlast
		.h2f_WVALID                (),                                          //  output,     width = 1,                    .wvalid
		.h2f_WREADY                (),                                          //   input,     width = 1,                    .wready
		.h2f_BID                   (),                                          //   input,     width = 4,                    .bid
		.h2f_BRESP                 (),                                          //   input,     width = 2,                    .bresp
		.h2f_BVALID                (),                                          //   input,     width = 1,                    .bvalid
		.h2f_BREADY                (),                                          //  output,     width = 1,                    .bready
		.h2f_ARID                  (),                                          //  output,     width = 4,                    .arid
		.h2f_ARADDR                (),                                          //  output,    width = 32,                    .araddr
		.h2f_ARLEN                 (),                                          //  output,     width = 4,                    .arlen
		.h2f_ARSIZE                (),                                          //  output,     width = 3,                    .arsize
		.h2f_ARBURST               (),                                          //  output,     width = 2,                    .arburst
		.h2f_ARLOCK                (),                                          //  output,     width = 2,                    .arlock
		.h2f_ARCACHE               (),                                          //  output,     width = 4,                    .arcache
		.h2f_ARPROT                (),                                          //  output,     width = 3,                    .arprot
		.h2f_ARVALID               (),                                          //  output,     width = 1,                    .arvalid
		.h2f_ARREADY               (),                                          //   input,     width = 1,                    .arready
		.h2f_ARUSER                (),                                          //  output,     width = 5,                    .aruser
		.h2f_RID                   (),                                          //   input,     width = 4,                    .rid
		.h2f_RDATA                 (),                                          //   input,    width = 32,                    .rdata
		.h2f_RRESP                 (),                                          //   input,     width = 2,                    .rresp
		.h2f_RLAST                 (),                                          //   input,     width = 1,                    .rlast
		.h2f_RVALID                (),                                          //   input,     width = 1,                    .rvalid
		.h2f_RREADY                (),                                          //  output,     width = 1,                    .rready
		.f2sdram0_clk              (clock_bridge_0_out_clk_clk),                //   input,     width = 1,      f2sdram0_clock.clk
		.f2s_sdram0_rst            (~rst_controller_reset_out_reset),           //   input,     width = 1,      f2sdram0_reset.reset_n
		.f2sdram0_ARADDR           (),                                          //   input,    width = 32,       f2sdram0_data.araddr
		.f2sdram0_ARBURST          (),                                          //   input,     width = 2,                    .arburst
		.f2sdram0_ARCACHE          (),                                          //   input,     width = 4,                    .arcache
		.f2sdram0_ARID             (),                                          //   input,     width = 4,                    .arid
		.f2sdram0_ARLEN            (),                                          //   input,     width = 4,                    .arlen
		.f2sdram0_ARLOCK           (),                                          //   input,     width = 2,                    .arlock
		.f2sdram0_ARPROT           (),                                          //   input,     width = 3,                    .arprot
		.f2sdram0_ARREADY          (),                                          //  output,     width = 1,                    .arready
		.f2sdram0_ARSIZE           (),                                          //   input,     width = 3,                    .arsize
		.f2sdram0_ARUSER           (),                                          //   input,     width = 5,                    .aruser
		.f2sdram0_ARVALID          (),                                          //   input,     width = 1,                    .arvalid
		.f2sdram0_AWADDR           (),                                          //   input,    width = 32,                    .awaddr
		.f2sdram0_AWBURST          (),                                          //   input,     width = 2,                    .awburst
		.f2sdram0_AWCACHE          (),                                          //   input,     width = 4,                    .awcache
		.f2sdram0_AWID             (),                                          //   input,     width = 4,                    .awid
		.f2sdram0_AWLEN            (),                                          //   input,     width = 4,                    .awlen
		.f2sdram0_AWLOCK           (),                                          //   input,     width = 2,                    .awlock
		.f2sdram0_AWPROT           (),                                          //   input,     width = 3,                    .awprot
		.f2sdram0_AWREADY          (),                                          //  output,     width = 1,                    .awready
		.f2sdram0_AWSIZE           (),                                          //   input,     width = 3,                    .awsize
		.f2sdram0_AWUSER           (),                                          //   input,     width = 5,                    .awuser
		.f2sdram0_AWVALID          (),                                          //   input,     width = 1,                    .awvalid
		.f2sdram0_WDATA            (),                                          //   input,   width = 128,                    .wdata
		.f2sdram0_WID              (),                                          //   input,     width = 4,                    .wid
		.f2sdram0_WLAST            (),                                          //   input,     width = 1,                    .wlast
		.f2sdram0_WREADY           (),                                          //  output,     width = 1,                    .wready
		.f2sdram0_WSTRB            (),                                          //   input,    width = 16,                    .wstrb
		.f2sdram0_WVALID           (),                                          //   input,     width = 1,                    .wvalid
		.f2sdram0_BID              (),                                          //  output,     width = 4,                    .bid
		.f2sdram0_BREADY           (),                                          //   input,     width = 1,                    .bready
		.f2sdram0_BRESP            (),                                          //  output,     width = 2,                    .bresp
		.f2sdram0_BVALID           (),                                          //  output,     width = 1,                    .bvalid
		.f2sdram0_RDATA            (),                                          //  output,   width = 128,                    .rdata
		.f2sdram0_RID              (),                                          //  output,     width = 4,                    .rid
		.f2sdram0_RLAST            (),                                          //  output,     width = 1,                    .rlast
		.f2sdram0_RREADY           (),                                          //   input,     width = 1,                    .rready
		.f2sdram0_RRESP            (),                                          //  output,     width = 2,                    .rresp
		.f2sdram0_RVALID           (),                                          //  output,     width = 1,                    .rvalid
		.f2sdram2_clk              (clock_bridge_0_out_clk_clk),                //   input,     width = 1,      f2sdram2_clock.clk
		.f2s_sdram2_rst            (~rst_controller_reset_out_reset),           //   input,     width = 1,      f2sdram2_reset.reset_n
		.f2sdram2_ARADDR           (),                                          //   input,    width = 32,       f2sdram2_data.araddr
		.f2sdram2_ARBURST          (),                                          //   input,     width = 2,                    .arburst
		.f2sdram2_ARCACHE          (),                                          //   input,     width = 4,                    .arcache
		.f2sdram2_ARID             (),                                          //   input,     width = 4,                    .arid
		.f2sdram2_ARLEN            (),                                          //   input,     width = 4,                    .arlen
		.f2sdram2_ARLOCK           (),                                          //   input,     width = 2,                    .arlock
		.f2sdram2_ARPROT           (),                                          //   input,     width = 3,                    .arprot
		.f2sdram2_ARREADY          (),                                          //  output,     width = 1,                    .arready
		.f2sdram2_ARSIZE           (),                                          //   input,     width = 3,                    .arsize
		.f2sdram2_ARUSER           (),                                          //   input,     width = 5,                    .aruser
		.f2sdram2_ARVALID          (),                                          //   input,     width = 1,                    .arvalid
		.f2sdram2_AWADDR           (),                                          //   input,    width = 32,                    .awaddr
		.f2sdram2_AWBURST          (),                                          //   input,     width = 2,                    .awburst
		.f2sdram2_AWCACHE          (),                                          //   input,     width = 4,                    .awcache
		.f2sdram2_AWID             (),                                          //   input,     width = 4,                    .awid
		.f2sdram2_AWLEN            (),                                          //   input,     width = 4,                    .awlen
		.f2sdram2_AWLOCK           (),                                          //   input,     width = 2,                    .awlock
		.f2sdram2_AWPROT           (),                                          //   input,     width = 3,                    .awprot
		.f2sdram2_AWREADY          (),                                          //  output,     width = 1,                    .awready
		.f2sdram2_AWSIZE           (),                                          //   input,     width = 3,                    .awsize
		.f2sdram2_AWUSER           (),                                          //   input,     width = 5,                    .awuser
		.f2sdram2_AWVALID          (),                                          //   input,     width = 1,                    .awvalid
		.f2sdram2_WDATA            (),                                          //   input,   width = 128,                    .wdata
		.f2sdram2_WID              (),                                          //   input,     width = 4,                    .wid
		.f2sdram2_WLAST            (),                                          //   input,     width = 1,                    .wlast
		.f2sdram2_WREADY           (),                                          //  output,     width = 1,                    .wready
		.f2sdram2_WSTRB            (),                                          //   input,    width = 16,                    .wstrb
		.f2sdram2_WVALID           (),                                          //   input,     width = 1,                    .wvalid
		.f2sdram2_BID              (),                                          //  output,     width = 4,                    .bid
		.f2sdram2_BREADY           (),                                          //   input,     width = 1,                    .bready
		.f2sdram2_BRESP            (),                                          //  output,     width = 2,                    .bresp
		.f2sdram2_BVALID           (),                                          //  output,     width = 1,                    .bvalid
		.f2sdram2_RDATA            (),                                          //  output,   width = 128,                    .rdata
		.f2sdram2_RID              (),                                          //  output,     width = 4,                    .rid
		.f2sdram2_RLAST            (),                                          //  output,     width = 1,                    .rlast
		.f2sdram2_RREADY           (),                                          //   input,     width = 1,                    .rready
		.f2sdram2_RRESP            (),                                          //  output,     width = 2,                    .rresp
		.f2sdram2_RVALID           (),                                          //  output,     width = 1,                    .rvalid
		.hps_io_phery_emac0_TX_CLK (hps_io_hps_io_phery_emac0_TX_CLK),          //  output,     width = 1,              hps_io.hps_io_phery_emac0_TX_CLK
		.hps_io_phery_emac0_TXD0   (hps_io_hps_io_phery_emac0_TXD0),            //  output,     width = 1,                    .hps_io_phery_emac0_TXD0
		.hps_io_phery_emac0_TXD1   (hps_io_hps_io_phery_emac0_TXD1),            //  output,     width = 1,                    .hps_io_phery_emac0_TXD1
		.hps_io_phery_emac0_TXD2   (hps_io_hps_io_phery_emac0_TXD2),            //  output,     width = 1,                    .hps_io_phery_emac0_TXD2
		.hps_io_phery_emac0_TXD3   (hps_io_hps_io_phery_emac0_TXD3),            //  output,     width = 1,                    .hps_io_phery_emac0_TXD3
		.hps_io_phery_emac0_RX_CTL (hps_io_hps_io_phery_emac0_RX_CTL),          //   input,     width = 1,                    .hps_io_phery_emac0_RX_CTL
		.hps_io_phery_emac0_TX_CTL (hps_io_hps_io_phery_emac0_TX_CTL),          //  output,     width = 1,                    .hps_io_phery_emac0_TX_CTL
		.hps_io_phery_emac0_RX_CLK (hps_io_hps_io_phery_emac0_RX_CLK),          //   input,     width = 1,                    .hps_io_phery_emac0_RX_CLK
		.hps_io_phery_emac0_RXD0   (hps_io_hps_io_phery_emac0_RXD0),            //   input,     width = 1,                    .hps_io_phery_emac0_RXD0
		.hps_io_phery_emac0_RXD1   (hps_io_hps_io_phery_emac0_RXD1),            //   input,     width = 1,                    .hps_io_phery_emac0_RXD1
		.hps_io_phery_emac0_RXD2   (hps_io_hps_io_phery_emac0_RXD2),            //   input,     width = 1,                    .hps_io_phery_emac0_RXD2
		.hps_io_phery_emac0_RXD3   (hps_io_hps_io_phery_emac0_RXD3),            //   input,     width = 1,                    .hps_io_phery_emac0_RXD3
		.hps_io_phery_emac0_MDIO   (hps_io_hps_io_phery_emac0_MDIO),            //   inout,     width = 1,                    .hps_io_phery_emac0_MDIO
		.hps_io_phery_emac0_MDC    (hps_io_hps_io_phery_emac0_MDC),             //  output,     width = 1,                    .hps_io_phery_emac0_MDC
		.hps_io_phery_sdmmc_CMD    (hps_io_hps_io_phery_sdmmc_CMD),             //   inout,     width = 1,                    .hps_io_phery_sdmmc_CMD
		.hps_io_phery_sdmmc_D0     (hps_io_hps_io_phery_sdmmc_D0),              //   inout,     width = 1,                    .hps_io_phery_sdmmc_D0
		.hps_io_phery_sdmmc_D1     (hps_io_hps_io_phery_sdmmc_D1),              //   inout,     width = 1,                    .hps_io_phery_sdmmc_D1
		.hps_io_phery_sdmmc_D2     (hps_io_hps_io_phery_sdmmc_D2),              //   inout,     width = 1,                    .hps_io_phery_sdmmc_D2
		.hps_io_phery_sdmmc_D3     (hps_io_hps_io_phery_sdmmc_D3),              //   inout,     width = 1,                    .hps_io_phery_sdmmc_D3
		.hps_io_phery_sdmmc_D4     (hps_io_hps_io_phery_sdmmc_D4),              //   inout,     width = 1,                    .hps_io_phery_sdmmc_D4
		.hps_io_phery_sdmmc_D5     (hps_io_hps_io_phery_sdmmc_D5),              //   inout,     width = 1,                    .hps_io_phery_sdmmc_D5
		.hps_io_phery_sdmmc_D6     (hps_io_hps_io_phery_sdmmc_D6),              //   inout,     width = 1,                    .hps_io_phery_sdmmc_D6
		.hps_io_phery_sdmmc_D7     (hps_io_hps_io_phery_sdmmc_D7),              //   inout,     width = 1,                    .hps_io_phery_sdmmc_D7
		.hps_io_phery_sdmmc_CCLK   (hps_io_hps_io_phery_sdmmc_CCLK),            //  output,     width = 1,                    .hps_io_phery_sdmmc_CCLK
		.hps_io_phery_usb0_DATA0   (hps_io_hps_io_phery_usb0_DATA0),            //   inout,     width = 1,                    .hps_io_phery_usb0_DATA0
		.hps_io_phery_usb0_DATA1   (hps_io_hps_io_phery_usb0_DATA1),            //   inout,     width = 1,                    .hps_io_phery_usb0_DATA1
		.hps_io_phery_usb0_DATA2   (hps_io_hps_io_phery_usb0_DATA2),            //   inout,     width = 1,                    .hps_io_phery_usb0_DATA2
		.hps_io_phery_usb0_DATA3   (hps_io_hps_io_phery_usb0_DATA3),            //   inout,     width = 1,                    .hps_io_phery_usb0_DATA3
		.hps_io_phery_usb0_DATA4   (hps_io_hps_io_phery_usb0_DATA4),            //   inout,     width = 1,                    .hps_io_phery_usb0_DATA4
		.hps_io_phery_usb0_DATA5   (hps_io_hps_io_phery_usb0_DATA5),            //   inout,     width = 1,                    .hps_io_phery_usb0_DATA5
		.hps_io_phery_usb0_DATA6   (hps_io_hps_io_phery_usb0_DATA6),            //   inout,     width = 1,                    .hps_io_phery_usb0_DATA6
		.hps_io_phery_usb0_DATA7   (hps_io_hps_io_phery_usb0_DATA7),            //   inout,     width = 1,                    .hps_io_phery_usb0_DATA7
		.hps_io_phery_usb0_CLK     (hps_io_hps_io_phery_usb0_CLK),              //   input,     width = 1,                    .hps_io_phery_usb0_CLK
		.hps_io_phery_usb0_STP     (hps_io_hps_io_phery_usb0_STP),              //  output,     width = 1,                    .hps_io_phery_usb0_STP
		.hps_io_phery_usb0_DIR     (hps_io_hps_io_phery_usb0_DIR),              //   input,     width = 1,                    .hps_io_phery_usb0_DIR
		.hps_io_phery_usb0_NXT     (hps_io_hps_io_phery_usb0_NXT),              //   input,     width = 1,                    .hps_io_phery_usb0_NXT
		.hps_io_phery_spim1_CLK    (hps_io_hps_io_phery_spim1_CLK),             //  output,     width = 1,                    .hps_io_phery_spim1_CLK
		.hps_io_phery_spim1_MOSI   (hps_io_hps_io_phery_spim1_MOSI),            //  output,     width = 1,                    .hps_io_phery_spim1_MOSI
		.hps_io_phery_spim1_MISO   (hps_io_hps_io_phery_spim1_MISO),            //   input,     width = 1,                    .hps_io_phery_spim1_MISO
		.hps_io_phery_spim1_SS0_N  (hps_io_hps_io_phery_spim1_SS0_N),           //  output,     width = 1,                    .hps_io_phery_spim1_SS0_N
		.hps_io_phery_spim1_SS1_N  (hps_io_hps_io_phery_spim1_SS1_N),           //  output,     width = 1,                    .hps_io_phery_spim1_SS1_N
		.hps_io_phery_trace_CLK    (hps_io_hps_io_phery_trace_CLK),             //  output,     width = 1,                    .hps_io_phery_trace_CLK
		.hps_io_phery_trace_D0     (hps_io_hps_io_phery_trace_D0),              //  output,     width = 1,                    .hps_io_phery_trace_D0
		.hps_io_phery_trace_D1     (hps_io_hps_io_phery_trace_D1),              //  output,     width = 1,                    .hps_io_phery_trace_D1
		.hps_io_phery_trace_D2     (hps_io_hps_io_phery_trace_D2),              //  output,     width = 1,                    .hps_io_phery_trace_D2
		.hps_io_phery_trace_D3     (hps_io_hps_io_phery_trace_D3),              //  output,     width = 1,                    .hps_io_phery_trace_D3
		.hps_io_phery_uart1_RX     (hps_io_hps_io_phery_uart1_RX),              //   input,     width = 1,                    .hps_io_phery_uart1_RX
		.hps_io_phery_uart1_TX     (hps_io_hps_io_phery_uart1_TX),              //  output,     width = 1,                    .hps_io_phery_uart1_TX
		.hps_io_phery_i2c1_SDA     (hps_io_hps_io_phery_i2c1_SDA),              //   inout,     width = 1,                    .hps_io_phery_i2c1_SDA
		.hps_io_phery_i2c1_SCL     (hps_io_hps_io_phery_i2c1_SCL),              //   inout,     width = 1,                    .hps_io_phery_i2c1_SCL
		.hps_io_gpio_gpio1_io5     (hps_io_hps_io_gpio_gpio1_io5),              //   inout,     width = 1,                    .hps_io_gpio_gpio1_io5
		.hps_io_gpio_gpio1_io14    (hps_io_hps_io_gpio_gpio1_io14),             //   inout,     width = 1,                    .hps_io_gpio_gpio1_io14
		.hps_io_gpio_gpio1_io16    (hps_io_hps_io_gpio_gpio1_io16),             //   inout,     width = 1,                    .hps_io_gpio_gpio1_io16
		.hps_io_gpio_gpio1_io17    (hps_io_hps_io_gpio_gpio1_io17)              //   inout,     width = 1,                    .hps_io_gpio_gpio1_io17
	);

	qsys_top_clock_bridge_0 clock_bridge_0 (
		.in_clk  (clk_clk),                    //   input,  width = 1,  in_clk.clk
		.out_clk (clock_bridge_0_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	emif_hps emif_hps (
		.global_reset_n (rst_in_out_reset_reset),                     //   input,     width = 1, global_reset_reset_sink.reset_n
		.pll_ref_clk    (emif_a10_hps_0_pll_ref_clk_clock_sink_clk),  //   input,     width = 1,  pll_ref_clk_clock_sink.clk
		.oct_rzqin      (emif_a10_hps_0_oct_conduit_end_oct_rzqin),   //   input,     width = 1,         oct_conduit_end.oct_rzqin
		.mem_ck         (emif_a10_hps_0_mem_conduit_end_mem_ck),      //  output,     width = 1,         mem_conduit_end.mem_ck
		.mem_ck_n       (emif_a10_hps_0_mem_conduit_end_mem_ck_n),    //  output,     width = 1,                        .mem_ck_n
		.mem_a          (emif_a10_hps_0_mem_conduit_end_mem_a),       //  output,    width = 17,                        .mem_a
		.mem_act_n      (emif_a10_hps_0_mem_conduit_end_mem_act_n),   //  output,     width = 1,                        .mem_act_n
		.mem_ba         (emif_a10_hps_0_mem_conduit_end_mem_ba),      //  output,     width = 2,                        .mem_ba
		.mem_bg         (emif_a10_hps_0_mem_conduit_end_mem_bg),      //  output,     width = 1,                        .mem_bg
		.mem_cke        (emif_a10_hps_0_mem_conduit_end_mem_cke),     //  output,     width = 1,                        .mem_cke
		.mem_cs_n       (emif_a10_hps_0_mem_conduit_end_mem_cs_n),    //  output,     width = 1,                        .mem_cs_n
		.mem_odt        (emif_a10_hps_0_mem_conduit_end_mem_odt),     //  output,     width = 1,                        .mem_odt
		.mem_reset_n    (emif_a10_hps_0_mem_conduit_end_mem_reset_n), //  output,     width = 1,                        .mem_reset_n
		.mem_par        (emif_a10_hps_0_mem_conduit_end_mem_par),     //  output,     width = 1,                        .mem_par
		.mem_alert_n    (emif_a10_hps_0_mem_conduit_end_mem_alert_n), //   input,     width = 1,                        .mem_alert_n
		.mem_dqs        (emif_a10_hps_0_mem_conduit_end_mem_dqs),     //   inout,     width = 4,                        .mem_dqs
		.mem_dqs_n      (emif_a10_hps_0_mem_conduit_end_mem_dqs_n),   //   inout,     width = 4,                        .mem_dqs_n
		.mem_dq         (emif_a10_hps_0_mem_conduit_end_mem_dq),      //   inout,    width = 32,                        .mem_dq
		.mem_dbi_n      (emif_a10_hps_0_mem_conduit_end_mem_dbi_n),   //   inout,     width = 4,                        .mem_dbi_n
		.hps_to_emif    (a10_hps_emif_hps_to_emif),                   //   input,  width = 4096,    hps_emif_conduit_end.hps_to_emif
		.emif_to_hps    (emif_hps_hps_emif_conduit_end_emif_to_hps),  //  output,  width = 4096,                        .emif_to_hps
		.hps_to_emif_gp (a10_hps_emif_gp_to_emif),                    //   input,     width = 2,                        .gp_to_emif
		.emif_to_hps_gp (emif_hps_hps_emif_conduit_end_emif_to_gp)    //  output,     width = 1,                        .emif_to_gp
	);

	num1 num1 (
		.clk        (clock_bridge_0_out_clk_clk),           //   input,   width = 1,                 clk.clk
		.reset_n    (rst_in_out_reset_reset),               //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_num1_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_num1_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_num1_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_num1_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_num1_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (num1_export)                           //  output,  width = 32, external_connection.export
	);

	num1 num2 (
		.clk        (clock_bridge_0_out_clk_clk),           //   input,   width = 1,                 clk.clk
		.reset_n    (rst_in_out_reset_reset),               //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_num2_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_num2_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_num2_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_num2_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_num2_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (num2_export)                           //  output,  width = 32, external_connection.export
	);

	result result (
		.clk      (clock_bridge_0_out_clk_clk),           //   input,   width = 1,                 clk.clk
		.reset_n  (rst_in_out_reset_reset),               //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_result_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_result_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (result_export)                         //   input,  width = 32, external_connection.export
	);

	rst_bdg rst_bdg (
		.clk       (clock_bridge_0_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset  (rst_controller_reset_out_reset), //   input,  width = 1,  in_reset.reset
		.out_reset (hps_fpga_reset_reset)            //  output,  width = 1, out_reset.reset
	);

	rst_in rst_in (
		.clk         (clock_bridge_0_out_clk_clk), //   input,  width = 1,       clk.clk
		.in_reset_n  (reset_reset_n),              //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (rst_in_out_reset_reset)      //  output,  width = 1, out_reset.reset_n
	);

	qsys_top_altera_mm_interconnect_181_sqn6eoa mm_interconnect_0 (
		.num1_s1_address                                      (mm_interconnect_0_num1_s1_address),    //  output,   width = 2,                                        num1_s1.address
		.num1_s1_write                                        (mm_interconnect_0_num1_s1_write),      //  output,   width = 1,                                               .write
		.num1_s1_readdata                                     (mm_interconnect_0_num1_s1_readdata),   //   input,  width = 32,                                               .readdata
		.num1_s1_writedata                                    (mm_interconnect_0_num1_s1_writedata),  //  output,  width = 32,                                               .writedata
		.num1_s1_chipselect                                   (mm_interconnect_0_num1_s1_chipselect), //  output,   width = 1,                                               .chipselect
		.num2_s1_address                                      (mm_interconnect_0_num2_s1_address),    //  output,   width = 2,                                        num2_s1.address
		.num2_s1_write                                        (mm_interconnect_0_num2_s1_write),      //  output,   width = 1,                                               .write
		.num2_s1_readdata                                     (mm_interconnect_0_num2_s1_readdata),   //   input,  width = 32,                                               .readdata
		.num2_s1_writedata                                    (mm_interconnect_0_num2_s1_writedata),  //  output,  width = 32,                                               .writedata
		.num2_s1_chipselect                                   (mm_interconnect_0_num2_s1_chipselect), //  output,   width = 1,                                               .chipselect
		.result_s1_address                                    (mm_interconnect_0_result_s1_address),  //  output,   width = 2,                                      result_s1.address
		.result_s1_readdata                                   (mm_interconnect_0_result_s1_readdata), //   input,  width = 32,                                               .readdata
		.a10_hps_h2f_lw_axi_master_awid                       (a10_hps_h2f_lw_axi_master_awid),       //   input,   width = 4,                      a10_hps_h2f_lw_axi_master.awid
		.a10_hps_h2f_lw_axi_master_awaddr                     (a10_hps_h2f_lw_axi_master_awaddr),     //   input,  width = 21,                                               .awaddr
		.a10_hps_h2f_lw_axi_master_awlen                      (a10_hps_h2f_lw_axi_master_awlen),      //   input,   width = 4,                                               .awlen
		.a10_hps_h2f_lw_axi_master_awsize                     (a10_hps_h2f_lw_axi_master_awsize),     //   input,   width = 3,                                               .awsize
		.a10_hps_h2f_lw_axi_master_awburst                    (a10_hps_h2f_lw_axi_master_awburst),    //   input,   width = 2,                                               .awburst
		.a10_hps_h2f_lw_axi_master_awlock                     (a10_hps_h2f_lw_axi_master_awlock),     //   input,   width = 2,                                               .awlock
		.a10_hps_h2f_lw_axi_master_awcache                    (a10_hps_h2f_lw_axi_master_awcache),    //   input,   width = 4,                                               .awcache
		.a10_hps_h2f_lw_axi_master_awprot                     (a10_hps_h2f_lw_axi_master_awprot),     //   input,   width = 3,                                               .awprot
		.a10_hps_h2f_lw_axi_master_awuser                     (a10_hps_h2f_lw_axi_master_awuser),     //   input,   width = 5,                                               .awuser
		.a10_hps_h2f_lw_axi_master_awvalid                    (a10_hps_h2f_lw_axi_master_awvalid),    //   input,   width = 1,                                               .awvalid
		.a10_hps_h2f_lw_axi_master_awready                    (a10_hps_h2f_lw_axi_master_awready),    //  output,   width = 1,                                               .awready
		.a10_hps_h2f_lw_axi_master_wid                        (a10_hps_h2f_lw_axi_master_wid),        //   input,   width = 4,                                               .wid
		.a10_hps_h2f_lw_axi_master_wdata                      (a10_hps_h2f_lw_axi_master_wdata),      //   input,  width = 32,                                               .wdata
		.a10_hps_h2f_lw_axi_master_wstrb                      (a10_hps_h2f_lw_axi_master_wstrb),      //   input,   width = 4,                                               .wstrb
		.a10_hps_h2f_lw_axi_master_wlast                      (a10_hps_h2f_lw_axi_master_wlast),      //   input,   width = 1,                                               .wlast
		.a10_hps_h2f_lw_axi_master_wvalid                     (a10_hps_h2f_lw_axi_master_wvalid),     //   input,   width = 1,                                               .wvalid
		.a10_hps_h2f_lw_axi_master_wready                     (a10_hps_h2f_lw_axi_master_wready),     //  output,   width = 1,                                               .wready
		.a10_hps_h2f_lw_axi_master_bid                        (a10_hps_h2f_lw_axi_master_bid),        //  output,   width = 4,                                               .bid
		.a10_hps_h2f_lw_axi_master_bresp                      (a10_hps_h2f_lw_axi_master_bresp),      //  output,   width = 2,                                               .bresp
		.a10_hps_h2f_lw_axi_master_bvalid                     (a10_hps_h2f_lw_axi_master_bvalid),     //  output,   width = 1,                                               .bvalid
		.a10_hps_h2f_lw_axi_master_bready                     (a10_hps_h2f_lw_axi_master_bready),     //   input,   width = 1,                                               .bready
		.a10_hps_h2f_lw_axi_master_arid                       (a10_hps_h2f_lw_axi_master_arid),       //   input,   width = 4,                                               .arid
		.a10_hps_h2f_lw_axi_master_araddr                     (a10_hps_h2f_lw_axi_master_araddr),     //   input,  width = 21,                                               .araddr
		.a10_hps_h2f_lw_axi_master_arlen                      (a10_hps_h2f_lw_axi_master_arlen),      //   input,   width = 4,                                               .arlen
		.a10_hps_h2f_lw_axi_master_arsize                     (a10_hps_h2f_lw_axi_master_arsize),     //   input,   width = 3,                                               .arsize
		.a10_hps_h2f_lw_axi_master_arburst                    (a10_hps_h2f_lw_axi_master_arburst),    //   input,   width = 2,                                               .arburst
		.a10_hps_h2f_lw_axi_master_arlock                     (a10_hps_h2f_lw_axi_master_arlock),     //   input,   width = 2,                                               .arlock
		.a10_hps_h2f_lw_axi_master_arcache                    (a10_hps_h2f_lw_axi_master_arcache),    //   input,   width = 4,                                               .arcache
		.a10_hps_h2f_lw_axi_master_arprot                     (a10_hps_h2f_lw_axi_master_arprot),     //   input,   width = 3,                                               .arprot
		.a10_hps_h2f_lw_axi_master_aruser                     (a10_hps_h2f_lw_axi_master_aruser),     //   input,   width = 5,                                               .aruser
		.a10_hps_h2f_lw_axi_master_arvalid                    (a10_hps_h2f_lw_axi_master_arvalid),    //   input,   width = 1,                                               .arvalid
		.a10_hps_h2f_lw_axi_master_arready                    (a10_hps_h2f_lw_axi_master_arready),    //  output,   width = 1,                                               .arready
		.a10_hps_h2f_lw_axi_master_rid                        (a10_hps_h2f_lw_axi_master_rid),        //  output,   width = 4,                                               .rid
		.a10_hps_h2f_lw_axi_master_rdata                      (a10_hps_h2f_lw_axi_master_rdata),      //  output,  width = 32,                                               .rdata
		.a10_hps_h2f_lw_axi_master_rresp                      (a10_hps_h2f_lw_axi_master_rresp),      //  output,   width = 2,                                               .rresp
		.a10_hps_h2f_lw_axi_master_rlast                      (a10_hps_h2f_lw_axi_master_rlast),      //  output,   width = 1,                                               .rlast
		.a10_hps_h2f_lw_axi_master_rvalid                     (a10_hps_h2f_lw_axi_master_rvalid),     //  output,   width = 1,                                               .rvalid
		.a10_hps_h2f_lw_axi_master_rready                     (a10_hps_h2f_lw_axi_master_rready),     //   input,   width = 1,                                               .rready
		.a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),       //   input,   width = 1, a10_hps_h2f_lw_axi_reset_reset_bridge_in_reset.reset
		.num1_reset_reset_bridge_in_reset_reset               (~rst_in_out_reset_reset),              //   input,   width = 1,               num1_reset_reset_bridge_in_reset.reset
		.clock_bridge_0_out_clk_clk                           (clock_bridge_0_out_clk_clk)            //   input,   width = 1,                         clock_bridge_0_out_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~a10_hps_h2f_reset_reset),       //   input,  width = 1, reset_in0.reset
		.reset_in1      (~rst_in_out_reset_reset),        //   input,  width = 1, reset_in1.reset
		.clk            (clock_bridge_0_out_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

endmodule
